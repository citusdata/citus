Parsed test spec with 2 sessions

starting permutation: s1-initialize s1-begin s1-router-select s2-router-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data

1               b             1
step s2-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data

1               b             1
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-router-select s2-real-time-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data

1               b             1
step s2-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-router-select s2-adaptive-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data

1               b             1
step s2-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       id             data           int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-real-time-select s2-router-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s2-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data

1               b             1
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-real-time-select s2-real-time-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s2-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-real-time-select s2-adaptive-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s2-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       id             data           int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-adaptive-select s2-router-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       id             data           int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s2-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data

1               b             1
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-adaptive-select s2-real-time-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       id             data           int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s2-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-adaptive-select s2-adaptive-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       id             data           int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s2-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       id             data           int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-router-select s2-insert s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data

1               b             1
step s2-insert: INSERT INTO select_append VALUES(0, 'k', 0);
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

6
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-router-select s2-insert-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data

1               b             1
step s2-insert-select: INSERT INTO select_append SELECT * FROM select_append;
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

10
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-router-select s2-update s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data

1               b             1
step s2-update: UPDATE select_append SET data = 'l' WHERE id = 0;
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-router-select s2-delete s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data

1               b             1
step s2-delete: DELETE FROM select_append WHERE id = 1;
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

4
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-router-select s2-truncate s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data

1               b             1
step s2-truncate: TRUNCATE select_append; <waiting ...>
step s1-commit: COMMIT;
step s2-truncate: <... completed>
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

0
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-router-select s2-drop s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data

1               b             1
step s2-drop: DROP TABLE select_append; <waiting ...>
step s1-commit: COMMIT;
step s2-drop: <... completed>
step s1-select-count: SELECT COUNT(*) FROM select_append;
ERROR:  relation "select_append" does not exist
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-router-select s2-ddl-create-index s1-commit s1-select-count s1-show-indexes
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data

1               b             1
step s2-ddl-create-index: CREATE INDEX select_append_index ON select_append(id);
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-indexes: SELECT run_command_on_workers('SELECT COUNT(*) FROM pg_indexes WHERE tablename LIKE ''select_append%''');
run_command_on_workers

(localhost,57637,t,1)
(localhost,57638,t,1)
restore_isolation_tester_func



starting permutation: s1-initialize s1-ddl-create-index s1-begin s1-router-select s2-ddl-drop-index s1-commit s1-select-count s1-show-indexes
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-ddl-create-index: CREATE INDEX select_append_index ON select_append(id);
step s1-begin: BEGIN;
step s1-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data

1               b             1
step s2-ddl-drop-index: DROP INDEX select_append_index; <waiting ...>
step s1-commit: COMMIT;
step s2-ddl-drop-index: <... completed>
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-indexes: SELECT run_command_on_workers('SELECT COUNT(*) FROM pg_indexes WHERE tablename LIKE ''select_append%''');
run_command_on_workers

(localhost,57637,t,0)
(localhost,57638,t,0)
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-disable-binary-protocol s1-router-select s2-ddl-create-index-concurrently s1-commit s1-select-count s1-show-indexes
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-disable-binary-protocol:
	-- Workaround router-select blocking blocking create-index-concurrently
	SET citus.enable_binary_protocol TO false;

step s1-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data

1               b             1
step s2-ddl-create-index-concurrently: CREATE INDEX CONCURRENTLY select_append_index ON select_append(id);
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-indexes: SELECT run_command_on_workers('SELECT COUNT(*) FROM pg_indexes WHERE tablename LIKE ''select_append%''');
run_command_on_workers

(localhost,57637,t,1)
(localhost,57638,t,1)
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-router-select s2-ddl-add-column s1-commit s1-select-count s1-show-columns
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data

1               b             1
step s2-ddl-add-column: ALTER TABLE select_append ADD new_column int DEFAULT 0; <waiting ...>
step s1-commit: COMMIT;
step s2-ddl-add-column: <... completed>
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-columns: SELECT run_command_on_workers('SELECT column_name FROM information_schema.columns WHERE table_name LIKE ''select_append%'' AND column_name = ''new_column'' ORDER BY 1 LIMIT 1');
run_command_on_workers

(localhost,57637,t,new_column)
(localhost,57638,t,new_column)
restore_isolation_tester_func



starting permutation: s1-initialize s1-ddl-add-column s1-begin s1-router-select s2-ddl-drop-column s1-commit s1-select-count s1-show-columns
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-ddl-add-column: ALTER TABLE select_append ADD new_column int DEFAULT 0;
step s1-begin: BEGIN;
step s1-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data       new_column

1               b             1              0
step s2-ddl-drop-column: ALTER TABLE select_append DROP new_column; <waiting ...>
step s1-commit: COMMIT;
step s2-ddl-drop-column: <... completed>
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-columns: SELECT run_command_on_workers('SELECT column_name FROM information_schema.columns WHERE table_name LIKE ''select_append%'' AND column_name = ''new_column'' ORDER BY 1 LIMIT 1');
run_command_on_workers

(localhost,57637,t,"")
(localhost,57638,t,"")
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-router-select s2-ddl-rename-column s1-commit s1-select-count s1-show-columns
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data

1               b             1
step s2-ddl-rename-column: ALTER TABLE select_append RENAME data TO new_column; <waiting ...>
step s1-commit: COMMIT;
step s2-ddl-rename-column: <... completed>
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-columns: SELECT run_command_on_workers('SELECT column_name FROM information_schema.columns WHERE table_name LIKE ''select_append%'' AND column_name = ''new_column'' ORDER BY 1 LIMIT 1');
run_command_on_workers

(localhost,57637,t,new_column)
(localhost,57638,t,new_column)
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-router-select s2-table-size s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data

1               b             1
step s2-table-size: SELECT citus_total_relation_size('select_append');
citus_total_relation_size

32768
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-router-select s2-master-modify-multiple-shards s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data

1               b             1
step s2-master-modify-multiple-shards: DELETE FROM select_append;
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

0
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s2-master-apply-delete-command s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s2-master-apply-delete-command: SELECT master_apply_delete_command('DELETE FROM select_append WHERE id <= 4;');
master_apply_delete_command

1
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

0
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s2-master-drop-all-shards s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s2-master-drop-all-shards: SELECT citus_drop_all_shards('select_append'::regclass, 'public', 'append_copy');
citus_drop_all_shards

1
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

0
restore_isolation_tester_func



starting permutation: s1-drop s1-create-non-distributed-table s1-begin s1-router-select s2-distribute-table s1-commit s1-select-count
create_distributed_table


step s1-drop: DROP TABLE select_append;
step s1-create-non-distributed-table: CREATE TABLE select_append(id integer, data text, int_data int);
step s1-begin: BEGIN;
step s1-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data

step s2-distribute-table: SELECT create_distributed_table('select_append', 'id', 'append');
create_distributed_table


step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

0
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-insert s2-router-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-insert: INSERT INTO select_append VALUES(0, 'k', 0);
step s2-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data

1               b             1
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

6
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-insert-select s2-router-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-insert-select: INSERT INTO select_append SELECT * FROM select_append;
step s2-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data

1               b             1
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

10
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-update s2-router-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-update: UPDATE select_append SET data = 'l' WHERE id = 0;
step s2-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data

1               b             1
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-delete s2-router-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-delete: DELETE FROM select_append WHERE id = 1;
step s2-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data

1               b             1
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

4
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-truncate s2-router-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-truncate: TRUNCATE select_append;
step s2-router-select: SELECT * FROM select_append WHERE id = 1; <waiting ...>
step s1-commit: COMMIT;
step s2-router-select: <... completed>
id             data           int_data

step s1-select-count: SELECT COUNT(*) FROM select_append;
count

0
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-drop s2-router-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-drop: DROP TABLE select_append;
step s2-router-select: SELECT * FROM select_append WHERE id = 1; <waiting ...>
step s1-commit: COMMIT;
step s2-router-select: <... completed>
error in steps s1-commit s2-router-select: ERROR:  relation "select_append" does not exist
step s1-select-count: SELECT COUNT(*) FROM select_append;
ERROR:  relation "select_append" does not exist
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-ddl-create-index s2-router-select s1-commit s1-select-count s1-show-indexes
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-ddl-create-index: CREATE INDEX select_append_index ON select_append(id);
step s2-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data

1               b             1
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-indexes: SELECT run_command_on_workers('SELECT COUNT(*) FROM pg_indexes WHERE tablename LIKE ''select_append%''');
run_command_on_workers

(localhost,57637,t,1)
(localhost,57638,t,1)
restore_isolation_tester_func



starting permutation: s1-initialize s1-ddl-create-index s1-begin s1-ddl-drop-index s2-router-select s1-commit s1-select-count s1-show-indexes
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-ddl-create-index: CREATE INDEX select_append_index ON select_append(id);
step s1-begin: BEGIN;
step s1-ddl-drop-index: DROP INDEX select_append_index;
step s2-router-select: SELECT * FROM select_append WHERE id = 1; <waiting ...>
step s1-commit: COMMIT;
step s2-router-select: <... completed>
id             data           int_data

1               b             1
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-indexes: SELECT run_command_on_workers('SELECT COUNT(*) FROM pg_indexes WHERE tablename LIKE ''select_append%''');
run_command_on_workers

(localhost,57637,t,0)
(localhost,57638,t,0)
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-ddl-add-column s2-router-select s1-commit s1-select-count s1-show-columns
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-ddl-add-column: ALTER TABLE select_append ADD new_column int DEFAULT 0;
step s2-router-select: SELECT * FROM select_append WHERE id = 1; <waiting ...>
step s1-commit: COMMIT;
step s2-router-select: <... completed>
id             data           int_data       new_column

1               b             1              0
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-columns: SELECT run_command_on_workers('SELECT column_name FROM information_schema.columns WHERE table_name LIKE ''select_append%'' AND column_name = ''new_column'' ORDER BY 1 LIMIT 1');
run_command_on_workers

(localhost,57637,t,new_column)
(localhost,57638,t,new_column)
restore_isolation_tester_func



starting permutation: s1-initialize s1-ddl-add-column s1-begin s1-ddl-drop-column s2-router-select s1-commit s1-select-count s1-show-columns
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-ddl-add-column: ALTER TABLE select_append ADD new_column int DEFAULT 0;
step s1-begin: BEGIN;
step s1-ddl-drop-column: ALTER TABLE select_append DROP new_column;
step s2-router-select: SELECT * FROM select_append WHERE id = 1; <waiting ...>
step s1-commit: COMMIT;
step s2-router-select: <... completed>
id             data           int_data

1               b             1
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-columns: SELECT run_command_on_workers('SELECT column_name FROM information_schema.columns WHERE table_name LIKE ''select_append%'' AND column_name = ''new_column'' ORDER BY 1 LIMIT 1');
run_command_on_workers

(localhost,57637,t,"")
(localhost,57638,t,"")
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-ddl-rename-column s2-router-select s1-commit s1-select-count s1-show-columns
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-ddl-rename-column: ALTER TABLE select_append RENAME data TO new_column;
step s2-router-select: SELECT * FROM select_append WHERE id = 1; <waiting ...>
step s1-commit: COMMIT;
step s2-router-select: <... completed>
id             new_column     int_data

1               b             1
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-columns: SELECT run_command_on_workers('SELECT column_name FROM information_schema.columns WHERE table_name LIKE ''select_append%'' AND column_name = ''new_column'' ORDER BY 1 LIMIT 1');
run_command_on_workers

(localhost,57637,t,new_column)
(localhost,57638,t,new_column)
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-table-size s2-router-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-table-size: SELECT citus_total_relation_size('select_append');
citus_total_relation_size

32768
step s2-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data

1               b             1
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-master-modify-multiple-shards s2-router-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-master-modify-multiple-shards: DELETE FROM select_append;
step s2-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data

1               b             1
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

0
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-master-apply-delete-command s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-master-apply-delete-command: SELECT master_apply_delete_command('DELETE FROM select_append WHERE id <= 4;');
master_apply_delete_command

1
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

0
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-master-drop-all-shards s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-master-drop-all-shards: SELECT citus_drop_all_shards('select_append'::regclass, 'public', 'append_copy');
citus_drop_all_shards

1
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

0
restore_isolation_tester_func



starting permutation: s1-drop s1-create-non-distributed-table s1-begin s1-distribute-table s2-router-select s1-commit s1-select-count
create_distributed_table


step s1-drop: DROP TABLE select_append;
step s1-create-non-distributed-table: CREATE TABLE select_append(id integer, data text, int_data int);
step s1-begin: BEGIN;
step s1-distribute-table: SELECT create_distributed_table('select_append', 'id', 'append');
create_distributed_table


step s2-router-select: SELECT * FROM select_append WHERE id = 1;
id             data           int_data

step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

0
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-real-time-select s2-insert s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s2-insert: INSERT INTO select_append VALUES(0, 'k', 0);
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

6
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-real-time-select s2-insert-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s2-insert-select: INSERT INTO select_append SELECT * FROM select_append;
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

10
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-real-time-select s2-update s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s2-update: UPDATE select_append SET data = 'l' WHERE id = 0;
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-real-time-select s2-delete s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s2-delete: DELETE FROM select_append WHERE id = 1;
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

4
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-real-time-select s2-truncate s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s2-truncate: TRUNCATE select_append; <waiting ...>
step s1-commit: COMMIT;
step s2-truncate: <... completed>
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

0
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-real-time-select s2-drop s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s2-drop: DROP TABLE select_append; <waiting ...>
step s1-commit: COMMIT;
step s2-drop: <... completed>
step s1-select-count: SELECT COUNT(*) FROM select_append;
ERROR:  relation "select_append" does not exist
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-real-time-select s2-ddl-create-index s1-commit s1-select-count s1-show-indexes
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s2-ddl-create-index: CREATE INDEX select_append_index ON select_append(id);
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-indexes: SELECT run_command_on_workers('SELECT COUNT(*) FROM pg_indexes WHERE tablename LIKE ''select_append%''');
run_command_on_workers

(localhost,57637,t,1)
(localhost,57638,t,1)
restore_isolation_tester_func



starting permutation: s1-initialize s1-ddl-create-index s1-begin s1-real-time-select s2-ddl-drop-index s1-commit s1-select-count s1-show-indexes
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-ddl-create-index: CREATE INDEX select_append_index ON select_append(id);
step s1-begin: BEGIN;
step s1-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s2-ddl-drop-index: DROP INDEX select_append_index; <waiting ...>
step s1-commit: COMMIT;
step s2-ddl-drop-index: <... completed>
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-indexes: SELECT run_command_on_workers('SELECT COUNT(*) FROM pg_indexes WHERE tablename LIKE ''select_append%''');
run_command_on_workers

(localhost,57637,t,0)
(localhost,57638,t,0)
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-real-time-select s2-ddl-create-index-concurrently s1-commit s1-select-count s1-show-indexes
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s2-ddl-create-index-concurrently: CREATE INDEX CONCURRENTLY select_append_index ON select_append(id);
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-indexes: SELECT run_command_on_workers('SELECT COUNT(*) FROM pg_indexes WHERE tablename LIKE ''select_append%''');
run_command_on_workers

(localhost,57637,t,1)
(localhost,57638,t,1)
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-real-time-select s2-ddl-add-column s1-commit s1-select-count s1-show-columns
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s2-ddl-add-column: ALTER TABLE select_append ADD new_column int DEFAULT 0; <waiting ...>
step s1-commit: COMMIT;
step s2-ddl-add-column: <... completed>
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-columns: SELECT run_command_on_workers('SELECT column_name FROM information_schema.columns WHERE table_name LIKE ''select_append%'' AND column_name = ''new_column'' ORDER BY 1 LIMIT 1');
run_command_on_workers

(localhost,57637,t,new_column)
(localhost,57638,t,new_column)
restore_isolation_tester_func



starting permutation: s1-initialize s1-ddl-add-column s1-begin s1-real-time-select s2-ddl-drop-column s1-commit s1-select-count s1-show-columns
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-ddl-add-column: ALTER TABLE select_append ADD new_column int DEFAULT 0;
step s1-begin: BEGIN;
step s1-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data       new_column

0               a             0              0
1               b             1              0
2               c             2              0
3               d             3              0
4               e             4              0
step s2-ddl-drop-column: ALTER TABLE select_append DROP new_column; <waiting ...>
step s1-commit: COMMIT;
step s2-ddl-drop-column: <... completed>
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-columns: SELECT run_command_on_workers('SELECT column_name FROM information_schema.columns WHERE table_name LIKE ''select_append%'' AND column_name = ''new_column'' ORDER BY 1 LIMIT 1');
run_command_on_workers

(localhost,57637,t,"")
(localhost,57638,t,"")
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-real-time-select s2-ddl-rename-column s1-commit s1-select-count s1-show-columns
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s2-ddl-rename-column: ALTER TABLE select_append RENAME data TO new_column; <waiting ...>
step s1-commit: COMMIT;
step s2-ddl-rename-column: <... completed>
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-columns: SELECT run_command_on_workers('SELECT column_name FROM information_schema.columns WHERE table_name LIKE ''select_append%'' AND column_name = ''new_column'' ORDER BY 1 LIMIT 1');
run_command_on_workers

(localhost,57637,t,new_column)
(localhost,57638,t,new_column)
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-real-time-select s2-table-size s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s2-table-size: SELECT citus_total_relation_size('select_append');
citus_total_relation_size

32768
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-real-time-select s2-master-modify-multiple-shards s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s2-master-modify-multiple-shards: DELETE FROM select_append;
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

0
restore_isolation_tester_func



starting permutation: s1-drop s1-create-non-distributed-table s1-begin s1-real-time-select s2-distribute-table s1-commit s1-select-count
create_distributed_table


step s1-drop: DROP TABLE select_append;
step s1-create-non-distributed-table: CREATE TABLE select_append(id integer, data text, int_data int);
step s1-begin: BEGIN;
step s1-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data

step s2-distribute-table: SELECT create_distributed_table('select_append', 'id', 'append');
create_distributed_table


step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

0
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-insert s2-real-time-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-insert: INSERT INTO select_append VALUES(0, 'k', 0);
step s2-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

6
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-insert-select s2-real-time-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-insert-select: INSERT INTO select_append SELECT * FROM select_append;
step s2-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

10
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-update s2-real-time-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-update: UPDATE select_append SET data = 'l' WHERE id = 0;
step s2-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-delete s2-real-time-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-delete: DELETE FROM select_append WHERE id = 1;
step s2-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

4
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-truncate s2-real-time-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-truncate: TRUNCATE select_append;
step s2-real-time-select: SELECT * FROM select_append ORDER BY 1, 2; <waiting ...>
step s1-commit: COMMIT;
step s2-real-time-select: <... completed>
id             data           int_data

step s1-select-count: SELECT COUNT(*) FROM select_append;
count

0
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-drop s2-real-time-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-drop: DROP TABLE select_append;
step s2-real-time-select: SELECT * FROM select_append ORDER BY 1, 2; <waiting ...>
step s1-commit: COMMIT;
step s2-real-time-select: <... completed>
error in steps s1-commit s2-real-time-select: ERROR:  relation "select_append" does not exist
step s1-select-count: SELECT COUNT(*) FROM select_append;
ERROR:  relation "select_append" does not exist
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-ddl-create-index s2-real-time-select s1-commit s1-select-count s1-show-indexes
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-ddl-create-index: CREATE INDEX select_append_index ON select_append(id);
step s2-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-indexes: SELECT run_command_on_workers('SELECT COUNT(*) FROM pg_indexes WHERE tablename LIKE ''select_append%''');
run_command_on_workers

(localhost,57637,t,1)
(localhost,57638,t,1)
restore_isolation_tester_func



starting permutation: s1-initialize s1-ddl-create-index s1-begin s1-ddl-drop-index s2-real-time-select s1-commit s1-select-count s1-show-indexes
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-ddl-create-index: CREATE INDEX select_append_index ON select_append(id);
step s1-begin: BEGIN;
step s1-ddl-drop-index: DROP INDEX select_append_index;
step s2-real-time-select: SELECT * FROM select_append ORDER BY 1, 2; <waiting ...>
step s1-commit: COMMIT;
step s2-real-time-select: <... completed>
id             data           int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-indexes: SELECT run_command_on_workers('SELECT COUNT(*) FROM pg_indexes WHERE tablename LIKE ''select_append%''');
run_command_on_workers

(localhost,57637,t,0)
(localhost,57638,t,0)
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-ddl-add-column s2-real-time-select s1-commit s1-select-count s1-show-columns
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-ddl-add-column: ALTER TABLE select_append ADD new_column int DEFAULT 0;
step s2-real-time-select: SELECT * FROM select_append ORDER BY 1, 2; <waiting ...>
step s1-commit: COMMIT;
step s2-real-time-select: <... completed>
id             data           int_data       new_column

0               a             0              0
1               b             1              0
2               c             2              0
3               d             3              0
4               e             4              0
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-columns: SELECT run_command_on_workers('SELECT column_name FROM information_schema.columns WHERE table_name LIKE ''select_append%'' AND column_name = ''new_column'' ORDER BY 1 LIMIT 1');
run_command_on_workers

(localhost,57637,t,new_column)
(localhost,57638,t,new_column)
restore_isolation_tester_func



starting permutation: s1-initialize s1-ddl-add-column s1-begin s1-ddl-drop-column s2-real-time-select s1-commit s1-select-count s1-show-columns
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-ddl-add-column: ALTER TABLE select_append ADD new_column int DEFAULT 0;
step s1-begin: BEGIN;
step s1-ddl-drop-column: ALTER TABLE select_append DROP new_column;
step s2-real-time-select: SELECT * FROM select_append ORDER BY 1, 2; <waiting ...>
step s1-commit: COMMIT;
step s2-real-time-select: <... completed>
id             data           int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-columns: SELECT run_command_on_workers('SELECT column_name FROM information_schema.columns WHERE table_name LIKE ''select_append%'' AND column_name = ''new_column'' ORDER BY 1 LIMIT 1');
run_command_on_workers

(localhost,57637,t,"")
(localhost,57638,t,"")
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-ddl-rename-column s2-real-time-select s1-commit s1-select-count s1-show-columns
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-ddl-rename-column: ALTER TABLE select_append RENAME data TO new_column;
step s2-real-time-select: SELECT * FROM select_append ORDER BY 1, 2; <waiting ...>
step s1-commit: COMMIT;
step s2-real-time-select: <... completed>
id             new_column     int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-columns: SELECT run_command_on_workers('SELECT column_name FROM information_schema.columns WHERE table_name LIKE ''select_append%'' AND column_name = ''new_column'' ORDER BY 1 LIMIT 1');
run_command_on_workers

(localhost,57637,t,new_column)
(localhost,57638,t,new_column)
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-table-size s2-real-time-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-table-size: SELECT citus_total_relation_size('select_append');
citus_total_relation_size

32768
step s2-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-master-modify-multiple-shards s2-real-time-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-master-modify-multiple-shards: DELETE FROM select_append;
step s2-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data

0               a             0
1               b             1
2               c             2
3               d             3
4               e             4
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

0
restore_isolation_tester_func



starting permutation: s1-drop s1-create-non-distributed-table s1-begin s1-distribute-table s2-real-time-select s1-commit s1-select-count
create_distributed_table


step s1-drop: DROP TABLE select_append;
step s1-create-non-distributed-table: CREATE TABLE select_append(id integer, data text, int_data int);
step s1-begin: BEGIN;
step s1-distribute-table: SELECT create_distributed_table('select_append', 'id', 'append');
create_distributed_table


step s2-real-time-select: SELECT * FROM select_append ORDER BY 1, 2;
id             data           int_data

step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

0
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-adaptive-select s2-insert s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       id             data           int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s2-insert: INSERT INTO select_append VALUES(0, 'k', 0);
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

6
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-adaptive-select s2-insert-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       id             data           int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s2-insert-select: INSERT INTO select_append SELECT * FROM select_append;
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

10
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-adaptive-select s2-update s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       id             data           int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s2-update: UPDATE select_append SET data = 'l' WHERE id = 0;
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-adaptive-select s2-delete s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       id             data           int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s2-delete: DELETE FROM select_append WHERE id = 1;
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

4
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-adaptive-select s2-truncate s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       id             data           int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s2-truncate: TRUNCATE select_append; <waiting ...>
step s1-commit: COMMIT;
step s2-truncate: <... completed>
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

0
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-adaptive-select s2-drop s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       id             data           int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s2-drop: DROP TABLE select_append; <waiting ...>
step s1-commit: COMMIT;
step s2-drop: <... completed>
step s1-select-count: SELECT COUNT(*) FROM select_append;
ERROR:  relation "select_append" does not exist
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-adaptive-select s2-ddl-create-index s1-commit s1-select-count s1-show-indexes
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       id             data           int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s2-ddl-create-index: CREATE INDEX select_append_index ON select_append(id);
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-indexes: SELECT run_command_on_workers('SELECT COUNT(*) FROM pg_indexes WHERE tablename LIKE ''select_append%''');
run_command_on_workers

(localhost,57637,t,1)
(localhost,57638,t,1)
restore_isolation_tester_func



starting permutation: s1-initialize s1-ddl-create-index s1-begin s1-adaptive-select s2-ddl-drop-index s1-commit s1-select-count s1-show-indexes
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-ddl-create-index: CREATE INDEX select_append_index ON select_append(id);
step s1-begin: BEGIN;
step s1-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       id             data           int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s2-ddl-drop-index: DROP INDEX select_append_index; <waiting ...>
step s1-commit: COMMIT;
step s2-ddl-drop-index: <... completed>
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-indexes: SELECT run_command_on_workers('SELECT COUNT(*) FROM pg_indexes WHERE tablename LIKE ''select_append%''');
run_command_on_workers

(localhost,57637,t,0)
(localhost,57638,t,0)
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-adaptive-select s2-ddl-create-index-concurrently s1-commit s1-select-count s1-show-indexes
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       id             data           int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s2-ddl-create-index-concurrently: CREATE INDEX CONCURRENTLY select_append_index ON select_append(id);
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-indexes: SELECT run_command_on_workers('SELECT COUNT(*) FROM pg_indexes WHERE tablename LIKE ''select_append%''');
run_command_on_workers

(localhost,57637,t,1)
(localhost,57638,t,1)
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-adaptive-select s2-ddl-add-column s1-commit s1-select-count s1-show-columns
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       id             data           int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s2-ddl-add-column: ALTER TABLE select_append ADD new_column int DEFAULT 0; <waiting ...>
step s1-commit: COMMIT;
step s2-ddl-add-column: <... completed>
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-columns: SELECT run_command_on_workers('SELECT column_name FROM information_schema.columns WHERE table_name LIKE ''select_append%'' AND column_name = ''new_column'' ORDER BY 1 LIMIT 1');
run_command_on_workers

(localhost,57637,t,new_column)
(localhost,57638,t,new_column)
restore_isolation_tester_func



starting permutation: s1-initialize s1-ddl-add-column s1-begin s1-adaptive-select s2-ddl-drop-column s1-commit s1-select-count s1-show-columns
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-ddl-add-column: ALTER TABLE select_append ADD new_column int DEFAULT 0;
step s1-begin: BEGIN;
step s1-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       new_column     id             data           int_data       new_column

0               a             0              0              0               a             0              0
1               b             1              0              1               b             1              0
2               c             2              0              2               c             2              0
3               d             3              0              3               d             3              0
4               e             4              0              4               e             4              0
step s2-ddl-drop-column: ALTER TABLE select_append DROP new_column; <waiting ...>
step s1-commit: COMMIT;
step s2-ddl-drop-column: <... completed>
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-columns: SELECT run_command_on_workers('SELECT column_name FROM information_schema.columns WHERE table_name LIKE ''select_append%'' AND column_name = ''new_column'' ORDER BY 1 LIMIT 1');
run_command_on_workers

(localhost,57637,t,"")
(localhost,57638,t,"")
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-adaptive-select s2-ddl-rename-column s1-commit s1-select-count s1-show-columns
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       id             data           int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s2-ddl-rename-column: ALTER TABLE select_append RENAME data TO new_column; <waiting ...>
step s1-commit: COMMIT;
step s2-ddl-rename-column: <... completed>
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-columns: SELECT run_command_on_workers('SELECT column_name FROM information_schema.columns WHERE table_name LIKE ''select_append%'' AND column_name = ''new_column'' ORDER BY 1 LIMIT 1');
run_command_on_workers

(localhost,57637,t,new_column)
(localhost,57638,t,new_column)
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-adaptive-select s2-table-size s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       id             data           int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s2-table-size: SELECT citus_total_relation_size('select_append');
citus_total_relation_size

32768
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-adaptive-select s2-master-modify-multiple-shards s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       id             data           int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s2-master-modify-multiple-shards: DELETE FROM select_append;
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

0
restore_isolation_tester_func



starting permutation: s1-drop s1-create-non-distributed-table s1-begin s1-adaptive-select s2-distribute-table s1-commit s1-select-count
create_distributed_table


step s1-drop: DROP TABLE select_append;
step s1-create-non-distributed-table: CREATE TABLE select_append(id integer, data text, int_data int);
step s1-begin: BEGIN;
step s1-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       id             data           int_data

step s2-distribute-table: SELECT create_distributed_table('select_append', 'id', 'append');
create_distributed_table


step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

0
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-insert s2-adaptive-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-insert: INSERT INTO select_append VALUES(0, 'k', 0);
step s2-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       id             data           int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

6
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-insert-select s2-adaptive-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-insert-select: INSERT INTO select_append SELECT * FROM select_append;
step s2-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       id             data           int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

10
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-update s2-adaptive-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-update: UPDATE select_append SET data = 'l' WHERE id = 0;
step s2-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       id             data           int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-delete s2-adaptive-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-delete: DELETE FROM select_append WHERE id = 1;
step s2-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       id             data           int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

4
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-truncate s2-adaptive-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-truncate: TRUNCATE select_append;
step s2-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;
 <waiting ...>
step s1-commit: COMMIT;
step s2-adaptive-select: <... completed>
id             data           int_data       id             data           int_data

step s1-select-count: SELECT COUNT(*) FROM select_append;
count

0
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-drop s2-adaptive-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-drop: DROP TABLE select_append;
step s2-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;
 <waiting ...>
step s1-commit: COMMIT;
step s2-adaptive-select: <... completed>
error in steps s1-commit s2-adaptive-select: ERROR:  relation "select_append" does not exist
step s1-select-count: SELECT COUNT(*) FROM select_append;
ERROR:  relation "select_append" does not exist
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-ddl-create-index s2-adaptive-select s1-commit s1-select-count s1-show-indexes
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-ddl-create-index: CREATE INDEX select_append_index ON select_append(id);
step s2-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       id             data           int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-indexes: SELECT run_command_on_workers('SELECT COUNT(*) FROM pg_indexes WHERE tablename LIKE ''select_append%''');
run_command_on_workers

(localhost,57637,t,1)
(localhost,57638,t,1)
restore_isolation_tester_func



starting permutation: s1-initialize s1-ddl-create-index s1-begin s1-ddl-drop-index s2-adaptive-select s1-commit s1-select-count s1-show-indexes
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-ddl-create-index: CREATE INDEX select_append_index ON select_append(id);
step s1-begin: BEGIN;
step s1-ddl-drop-index: DROP INDEX select_append_index;
step s2-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;
 <waiting ...>
step s1-commit: COMMIT;
step s2-adaptive-select: <... completed>
id             data           int_data       id             data           int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-indexes: SELECT run_command_on_workers('SELECT COUNT(*) FROM pg_indexes WHERE tablename LIKE ''select_append%''');
run_command_on_workers

(localhost,57637,t,0)
(localhost,57638,t,0)
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-ddl-add-column s2-adaptive-select s1-commit s1-select-count s1-show-columns
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-ddl-add-column: ALTER TABLE select_append ADD new_column int DEFAULT 0;
step s2-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;
 <waiting ...>
step s1-commit: COMMIT;
step s2-adaptive-select: <... completed>
id             data           int_data       new_column     id             data           int_data       new_column

0               a             0              0              0               a             0              0
1               b             1              0              1               b             1              0
2               c             2              0              2               c             2              0
3               d             3              0              3               d             3              0
4               e             4              0              4               e             4              0
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-columns: SELECT run_command_on_workers('SELECT column_name FROM information_schema.columns WHERE table_name LIKE ''select_append%'' AND column_name = ''new_column'' ORDER BY 1 LIMIT 1');
run_command_on_workers

(localhost,57637,t,new_column)
(localhost,57638,t,new_column)
restore_isolation_tester_func



starting permutation: s1-initialize s1-ddl-add-column s1-begin s1-ddl-drop-column s2-adaptive-select s1-commit s1-select-count s1-show-columns
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-ddl-add-column: ALTER TABLE select_append ADD new_column int DEFAULT 0;
step s1-begin: BEGIN;
step s1-ddl-drop-column: ALTER TABLE select_append DROP new_column;
step s2-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;
 <waiting ...>
step s1-commit: COMMIT;
step s2-adaptive-select: <... completed>
id             data           int_data       id             data           int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-columns: SELECT run_command_on_workers('SELECT column_name FROM information_schema.columns WHERE table_name LIKE ''select_append%'' AND column_name = ''new_column'' ORDER BY 1 LIMIT 1');
run_command_on_workers

(localhost,57637,t,"")
(localhost,57638,t,"")
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-ddl-rename-column s2-adaptive-select s1-commit s1-select-count s1-show-columns
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-ddl-rename-column: ALTER TABLE select_append RENAME data TO new_column;
step s2-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;
 <waiting ...>
step s1-commit: COMMIT;
step s2-adaptive-select: <... completed>
id             new_column     int_data       id             new_column     int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
step s1-show-columns: SELECT run_command_on_workers('SELECT column_name FROM information_schema.columns WHERE table_name LIKE ''select_append%'' AND column_name = ''new_column'' ORDER BY 1 LIMIT 1');
run_command_on_workers

(localhost,57637,t,new_column)
(localhost,57638,t,new_column)
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-table-size s2-adaptive-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-table-size: SELECT citus_total_relation_size('select_append');
citus_total_relation_size

32768
step s2-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       id             data           int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

5
restore_isolation_tester_func



starting permutation: s1-initialize s1-begin s1-master-modify-multiple-shards s2-adaptive-select s1-commit s1-select-count
create_distributed_table


step s1-initialize: COPY select_append FROM PROGRAM 'echo 0, a, 0 && echo 1, b, 1 && echo 2, c, 2 && echo 3, d, 3 && echo 4, e, 4' WITH CSV;
step s1-begin: BEGIN;
step s1-master-modify-multiple-shards: DELETE FROM select_append;
step s2-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       id             data           int_data

0               a             0              0               a             0
1               b             1              1               b             1
2               c             2              2               c             2
3               d             3              3               d             3
4               e             4              4               e             4
step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

0
restore_isolation_tester_func



starting permutation: s1-drop s1-create-non-distributed-table s1-begin s1-distribute-table s2-adaptive-select s1-commit s1-select-count
create_distributed_table


step s1-drop: DROP TABLE select_append;
step s1-create-non-distributed-table: CREATE TABLE select_append(id integer, data text, int_data int);
step s1-begin: BEGIN;
step s1-distribute-table: SELECT create_distributed_table('select_append', 'id', 'append');
create_distributed_table


step s2-adaptive-select:
		SET citus.enable_repartition_joins TO ON;
	SELECT * FROM select_append AS t1 JOIN select_append AS t2 ON t1.id = t2.int_data ORDER BY 1, 2, 3, 4;

id             data           int_data       id             data           int_data

step s1-commit: COMMIT;
step s1-select-count: SELECT COUNT(*) FROM select_append;
count

0
restore_isolation_tester_func


