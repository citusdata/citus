Parsed test spec with 2 sessions

starting permutation: s1-begin s2-start-session-level-connection s2-begin-on-worker s2-insert s1-move-placement s2-commit-worker s1-commit s1-select s1-get-shard-distribution s2-stop-connection
step s1-begin:
  BEGIN;

step s2-start-session-level-connection:
  SELECT start_session_level_connection_to_node('localhost', 57638);

start_session_level_connection_to_node


step s2-begin-on-worker:
  SELECT run_commands_on_session_level_connection_to_node('BEGIN');

run_commands_on_session_level_connection_to_node


step s2-insert:
  SELECT run_commands_on_session_level_connection_to_node('INSERT INTO logical_replicate_placement VALUES (15, 15)');

run_commands_on_session_level_connection_to_node


step s1-move-placement:
   SELECT master_move_shard_placement((SELECT * FROM selected_shard), 'localhost', 57637, 'localhost', 57638, shard_transfer_mode:='block_writes');
 <waiting ...>
step s2-commit-worker:
  SELECT run_commands_on_session_level_connection_to_node('COMMIT');

run_commands_on_session_level_connection_to_node


step s1-move-placement: <... completed>
master_move_shard_placement


step s1-commit:
	COMMIT;

step s1-select:
  SELECT * FROM logical_replicate_placement order by y;

x              y

15             15
step s1-get-shard-distribution:
  select nodeport from pg_dist_placement inner join pg_dist_node on(pg_dist_placement.groupid = pg_dist_node.groupid) where shardid in (SELECT * FROM selected_shard) order by nodeport;

nodeport

57638
step s2-stop-connection:
  SELECT stop_session_level_connection_to_node();

stop_session_level_connection_to_node


restore_isolation_tester_func



starting permutation: s1-insert s1-begin s2-start-session-level-connection s2-begin-on-worker s2-update s1-move-placement s2-commit-worker s1-commit s1-select s1-get-shard-distribution s2-stop-connection
step s1-insert:
  INSERT INTO logical_replicate_placement VALUES (15, 15);

step s1-begin:
  BEGIN;

step s2-start-session-level-connection:
  SELECT start_session_level_connection_to_node('localhost', 57638);

start_session_level_connection_to_node


step s2-begin-on-worker:
  SELECT run_commands_on_session_level_connection_to_node('BEGIN');

run_commands_on_session_level_connection_to_node


step s2-update:
  SELECT run_commands_on_session_level_connection_to_node('UPDATE logical_replicate_placement SET y = y + 1 WHERE x = 15');

run_commands_on_session_level_connection_to_node


step s1-move-placement:
   SELECT master_move_shard_placement((SELECT * FROM selected_shard), 'localhost', 57637, 'localhost', 57638, shard_transfer_mode:='block_writes');
 <waiting ...>
step s2-commit-worker:
  SELECT run_commands_on_session_level_connection_to_node('COMMIT');

run_commands_on_session_level_connection_to_node


step s1-move-placement: <... completed>
master_move_shard_placement


step s1-commit:
	COMMIT;

step s1-select:
  SELECT * FROM logical_replicate_placement order by y;

x              y

15             16
step s1-get-shard-distribution:
  select nodeport from pg_dist_placement inner join pg_dist_node on(pg_dist_placement.groupid = pg_dist_node.groupid) where shardid in (SELECT * FROM selected_shard) order by nodeport;

nodeport

57638
step s2-stop-connection:
  SELECT stop_session_level_connection_to_node();

stop_session_level_connection_to_node


restore_isolation_tester_func



starting permutation: s1-insert s1-begin s2-start-session-level-connection s2-begin-on-worker s2-delete s1-move-placement s2-commit-worker s1-commit s1-select s1-get-shard-distribution s2-stop-connection
step s1-insert:
  INSERT INTO logical_replicate_placement VALUES (15, 15);

step s1-begin:
  BEGIN;

step s2-start-session-level-connection:
  SELECT start_session_level_connection_to_node('localhost', 57638);

start_session_level_connection_to_node


step s2-begin-on-worker:
  SELECT run_commands_on_session_level_connection_to_node('BEGIN');

run_commands_on_session_level_connection_to_node


step s2-delete:
  SELECT run_commands_on_session_level_connection_to_node('DELETE FROM logical_replicate_placement WHERE x = 15');

run_commands_on_session_level_connection_to_node


step s1-move-placement:
   SELECT master_move_shard_placement((SELECT * FROM selected_shard), 'localhost', 57637, 'localhost', 57638, shard_transfer_mode:='block_writes');
 <waiting ...>
step s2-commit-worker:
  SELECT run_commands_on_session_level_connection_to_node('COMMIT');

run_commands_on_session_level_connection_to_node


step s1-move-placement: <... completed>
master_move_shard_placement


step s1-commit:
	COMMIT;

step s1-select:
  SELECT * FROM logical_replicate_placement order by y;

x              y

step s1-get-shard-distribution:
  select nodeport from pg_dist_placement inner join pg_dist_node on(pg_dist_placement.groupid = pg_dist_node.groupid) where shardid in (SELECT * FROM selected_shard) order by nodeport;

nodeport

57638
step s2-stop-connection:
  SELECT stop_session_level_connection_to_node();

stop_session_level_connection_to_node


restore_isolation_tester_func



starting permutation: s1-insert s1-begin s2-start-session-level-connection s2-begin-on-worker s2-select s1-move-placement s2-commit-worker s1-commit s1-get-shard-distribution s2-stop-connection
step s1-insert:
  INSERT INTO logical_replicate_placement VALUES (15, 15);

step s1-begin:
  BEGIN;

step s2-start-session-level-connection:
  SELECT start_session_level_connection_to_node('localhost', 57638);

start_session_level_connection_to_node


step s2-begin-on-worker:
  SELECT run_commands_on_session_level_connection_to_node('BEGIN');

run_commands_on_session_level_connection_to_node


step s2-select:
  SELECT run_commands_on_session_level_connection_to_node('SELECT * FROM logical_replicate_placement ORDER BY y');

run_commands_on_session_level_connection_to_node


step s1-move-placement:
   SELECT master_move_shard_placement((SELECT * FROM selected_shard), 'localhost', 57637, 'localhost', 57638, shard_transfer_mode:='block_writes');
 <waiting ...>
step s2-commit-worker:
  SELECT run_commands_on_session_level_connection_to_node('COMMIT');

run_commands_on_session_level_connection_to_node


step s1-move-placement: <... completed>
master_move_shard_placement


step s1-commit:
	COMMIT;

step s1-get-shard-distribution:
  select nodeport from pg_dist_placement inner join pg_dist_node on(pg_dist_placement.groupid = pg_dist_node.groupid) where shardid in (SELECT * FROM selected_shard) order by nodeport;

nodeport

57638
step s2-stop-connection:
  SELECT stop_session_level_connection_to_node();

stop_session_level_connection_to_node


restore_isolation_tester_func



starting permutation: s1-insert s1-begin s2-start-session-level-connection s2-begin-on-worker s2-select-for-update s1-move-placement s2-commit-worker s1-commit s1-get-shard-distribution s2-stop-connection
step s1-insert:
  INSERT INTO logical_replicate_placement VALUES (15, 15);

step s1-begin:
  BEGIN;

step s2-start-session-level-connection:
  SELECT start_session_level_connection_to_node('localhost', 57638);

start_session_level_connection_to_node


step s2-begin-on-worker:
  SELECT run_commands_on_session_level_connection_to_node('BEGIN');

run_commands_on_session_level_connection_to_node


step s2-select-for-update:
  SELECT run_commands_on_session_level_connection_to_node('SELECT * FROM logical_replicate_placement WHERE x=15 FOR UPDATE');

run_commands_on_session_level_connection_to_node


step s1-move-placement:
   SELECT master_move_shard_placement((SELECT * FROM selected_shard), 'localhost', 57637, 'localhost', 57638, shard_transfer_mode:='block_writes');
 <waiting ...>
step s2-commit-worker:
  SELECT run_commands_on_session_level_connection_to_node('COMMIT');

run_commands_on_session_level_connection_to_node


step s1-move-placement: <... completed>
master_move_shard_placement


step s1-commit:
	COMMIT;

step s1-get-shard-distribution:
  select nodeport from pg_dist_placement inner join pg_dist_node on(pg_dist_placement.groupid = pg_dist_node.groupid) where shardid in (SELECT * FROM selected_shard) order by nodeport;

nodeport

57638
step s2-stop-connection:
  SELECT stop_session_level_connection_to_node();

stop_session_level_connection_to_node


restore_isolation_tester_func


