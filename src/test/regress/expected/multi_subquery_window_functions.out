-- ===================================================================
-- test multi subquery functionality for window functions
-- ===================================================================
CREATE VIEW subq AS
SELECT
  DISTINCT user_id, rank() OVER (PARTITION BY user_id ORDER BY value_1)
FROM
  users_table
GROUP BY
  user_id, value_1
HAVING count(*) > 1;
SELECT
   user_id, time, rnk
FROM
(
  SELECT
    *, rank() OVER my_win as rnk
  FROM
    events_table
    WINDOW my_win AS (PARTITION BY user_id ORDER BY time DESC)
) as foo
ORDER BY
  3 DESC, 1 DESC, 2 DESC
LIMIT
  10;
 user_id |              time               | rnk 
---------+---------------------------------+-----
      23 | Fri Jan 10 20:11:40.439606 2014 | 127
      23 | Fri Jan 10 20:15:35.594738 2014 | 126
      23 | Fri Jan 10 23:14:59.348548 2014 | 125
      23 | Fri Jan 10 23:38:35.800498 2014 | 124
      25 | Fri Jan 10 21:50:55.465393 2014 | 123
      23 | Sat Jan 11 00:40:59.383928 2014 | 123
      25 | Fri Jan 10 22:43:09.881855 2014 | 122
      23 | Sat Jan 11 00:42:46.148 2014    | 122
      25 | Fri Jan 10 23:08:28.963923 2014 | 121
      23 | Sat Jan 11 01:23:01.126017 2014 | 121
(10 rows)

-- the same test with different syntax
SELECT
   user_id, time, rnk
FROM
(
  SELECT
    *, rank() OVER (PARTITION BY user_id ORDER BY time DESC) as rnk
  FROM
    events_table
) as foo
ORDER BY
  3 DESC, 1 DESC, 2 DESC
LIMIT
  10;
 user_id |              time               | rnk 
---------+---------------------------------+-----
      23 | Fri Jan 10 20:11:40.439606 2014 | 127
      23 | Fri Jan 10 20:15:35.594738 2014 | 126
      23 | Fri Jan 10 23:14:59.348548 2014 | 125
      23 | Fri Jan 10 23:38:35.800498 2014 | 124
      25 | Fri Jan 10 21:50:55.465393 2014 | 123
      23 | Sat Jan 11 00:40:59.383928 2014 | 123
      25 | Fri Jan 10 22:43:09.881855 2014 | 122
      23 | Sat Jan 11 00:42:46.148 2014    | 122
      25 | Fri Jan 10 23:08:28.963923 2014 | 121
      23 | Sat Jan 11 01:23:01.126017 2014 | 121
(10 rows)

-- similar test with lag
SELECT
   user_id, time, lag_event_type, row_no
FROM
(
  SELECT
    *, lag(event_type) OVER my_win  as lag_event_type, row_number() OVER my_win as row_no
  FROM
    events_table WINDOW my_win AS (PARTITION BY user_id ORDER BY time DESC)
) as foo
ORDER BY
  4 DESC, 3 DESC NULLS LAST, 1 DESC, 2 DESC
LIMIT
  10;
 user_id |              time               | lag_event_type | row_no 
---------+---------------------------------+----------------+--------
      23 | Fri Jan 10 20:11:40.439606 2014 |            338 |    127
      23 | Fri Jan 10 20:15:35.594738 2014 |            999 |    126
      23 | Fri Jan 10 23:14:59.348548 2014 |            783 |    125
      23 | Fri Jan 10 23:38:35.800498 2014 |            802 |    124
      25 | Fri Jan 10 21:50:55.465393 2014 |            517 |    123
      23 | Sat Jan 11 00:40:59.383928 2014 |            359 |    123
      25 | Fri Jan 10 22:43:09.881855 2014 |            918 |    122
      23 | Sat Jan 11 00:42:46.148 2014    |             68 |    122
      25 | Fri Jan 10 23:08:28.963923 2014 |            757 |    121
      23 | Sat Jan 11 01:23:01.126017 2014 |            251 |    121
(10 rows)

-- simple window function, partitioned and grouped by on the distribution key
SELECT
   user_id, rnk, avg_val_2
FROM
(
  SELECT
    user_id, rank() OVER my_win as rnk, avg(value_2) as avg_val_2
  FROM
    events_table
  GROUP BY
    user_id,  date_trunc('day', time)
  WINDOW my_win AS (PARTITION BY user_id ORDER BY avg(event_type) DESC)
) as foo
ORDER BY
  2 DESC, 1 DESC, 3 DESC
LIMIT
  10;
 user_id | rnk |      avg_val_2       
---------+-----+----------------------
      98 |  12 | 647.5000000000000000
      95 |  12 | 428.5000000000000000
      94 |  12 | 608.6666666666666667
      92 |  12 | 724.0000000000000000
      91 |  12 | 549.0000000000000000
      90 |  12 | 525.1000000000000000
      89 |  12 | 531.0000000000000000
      87 |  12 | 740.0000000000000000
      84 |  12 | 487.7500000000000000
      83 |  12 | 629.5000000000000000
(10 rows)

-- top level query has a group by on the result of the window function
SELECT
   min(user_id), min(time), lag_event_type, count(*)
FROM
(
  SELECT
    *, lag(event_type) OVER my_win  as lag_event_type
  FROM
    events_table WINDOW my_win AS (PARTITION BY user_id ORDER BY time DESC)
) as foo
GROUP BY
  lag_event_type
ORDER BY
  3 DESC NULLS LAST, 1 DESC, 2 DESC
LIMIT
  10;
 min |               min               | lag_event_type | count 
-----+---------------------------------+----------------+-------
  45 | Sat Jan 11 12:47:09.502744 2014 |           1000 |     2
  18 | Fri Jan 10 20:15:35.594738 2014 |            999 |     9
   1 | Sat Jan 11 21:08:41.737933 2014 |            998 |    10
   0 | Sat Jan 11 16:32:40.662168 2014 |            997 |     9
   3 | Fri Jan 10 23:30:18.011423 2014 |            996 |    13
  17 | Sun Jan 12 03:54:06.464758 2014 |            995 |     9
  23 | Tue Jan 14 22:04:23.44321 2014  |            994 |     7
   7 | Sat Jan 11 04:59:48.119353 2014 |            993 |     9
   8 | Sat Jan 11 05:14:45.845071 2014 |            992 |    14
   0 | Sun Jan 12 03:24:01.449152 2014 |            991 |    10
(10 rows)

-- window functions should work along with joins as well
SELECT * FROM
(
  SELECT
    DISTINCT users_table.user_id, lag(users_table.user_id) OVER w1, rank() OVER w1
  FROM
    users_table, events_table
  WHERE
    users_table.user_id = events_table.user_id and
    event_type < 25
  WINDOW w1 AS (PARTITION BY users_table.user_id, events_table.event_type ORDER BY events_table.time)
) as foo
ORDER BY 3 DESC, 1 DESC, 2 DESC NULLS LAST
LIMIT 10;
 user_id | lag | rank 
---------+-----+------
      90 |  90 |  114
      72 |  72 |  109
      26 |  26 |  109
      91 |  91 |  108
      55 |  55 |  107
      27 |  27 |  106
      60 |  60 |  101
      98 |  98 |   97
      39 |  39 |   95
      61 |  61 |   93
(10 rows)

-- two window functions in a single subquery should work fine as well
SELECT * FROM
(
  SELECT
    DISTINCT users_table.user_id, lag(users_table.user_id) OVER w1, rank() OVER w2
  FROM
    users_table, events_table
  WHERE
    users_table.user_id = events_table.user_id and
    event_type < 25
  WINDOW w1 AS (PARTITION BY users_table.user_id, events_table.event_type ORDER BY events_table.time),
  w2 AS (PARTITION BY users_table.user_id, (events_table.value_2 % 25) ORDER BY events_table.time)
) as foo
ORDER BY 3 DESC, 1 DESC, 2 DESC NULLS LAST
LIMIT 10;
 user_id | lag | rank 
---------+-----+------
      73 |  73 |  112
      73 |     |  112
      48 |  48 |  111
      48 |     |  111
      43 |  43 |  105
      43 |     |  105
      77 |  77 |  104
      77 |     |  104
      30 |  30 |  104
      30 |     |  104
(10 rows)

-- window functions should be fine within subquery joins
SELECT sub_1.user_id, max(lag_1), max(rank_1), max(rank_2) FROM
(
  SELECT
    DISTINCT users_table.user_id, lag(users_table.user_id) OVER w1 as lag_1, rank() OVER w2 as rank_1
  FROM
    users_table, events_table
  WHERE
    users_table.user_id = events_table.user_id and
    event_type < 25
  WINDOW w1 AS (PARTITION BY users_table.user_id, events_table.event_type ORDER BY events_table.time),
  w2 AS (PARTITION BY users_table.user_id, (events_table.value_2 % 25) ORDER BY events_table.time)
) as sub_1
JOIN
(
  SELECT
    DISTINCT users_table.user_id, lag(users_table.user_id) OVER w1 as lag_2, rank() OVER w2 as rank_2
  FROM
    users_table, events_table
  WHERE
    users_table.user_id = events_table.user_id and
    event_type < 25
  WINDOW w1 AS (PARTITION BY users_table.user_id, events_table.value_2 ORDER BY events_table.time),
  w2 AS (PARTITION BY users_table.user_id, (events_table.value_2 % 50) ORDER BY events_table.time)
) as sub_2
 ON(sub_1.user_id = sub_2.user_id)
 GROUP BY
  sub_1.user_id
 ORDER BY 3 DESC, 4 DESC, 1 DESC, 2 DESC NULLS LAST
LIMIT 10;
 user_id | max | max | max 
---------+-----+-----+-----
      73 |  73 | 112 | 112
      48 |  48 | 111 | 111
      43 |  43 | 105 |   1
      77 |  77 | 104 | 104
      30 |  30 | 104 | 104
      50 |  50 | 101 |   1
      79 |  79 |  97 |   1
      49 |  49 |  96 |  96
      44 |  44 |  93 |   1
      13 |  13 |  87 |   1
(10 rows)

-- GROUP BYs and PARTITION BYs should work fine together
SELECT
   avg(user_id), max(time), my_rank
FROM
(
  SELECT
    user_id, date_trunc('day', time) as time, rank() OVER my_win as my_rank
  FROM
    events_table
  GROUP BY
    user_id, date_trunc('day', time)
    WINDOW my_win AS (PARTITION BY user_id ORDER BY count(*) DESC)
) as foo
WHERE
  my_rank > 5
GROUP BY
  my_rank
ORDER BY
  3 DESC, 1 DESC,2 DESC
LIMIT
  10;
         avg         |           max            | my_rank 
---------------------+--------------------------+---------
 48.6250000000000000 | Tue Jan 21 00:00:00 2014 |      12
 48.4786324786324786 | Tue Jan 21 00:00:00 2014 |      11
 50.2083333333333333 | Tue Jan 21 00:00:00 2014 |      10
 51.8247422680412371 | Tue Jan 21 00:00:00 2014 |       9
 46.2061855670103093 | Mon Jan 20 00:00:00 2014 |       8
 52.5945945945945946 | Mon Jan 20 00:00:00 2014 |       7
 52.2589285714285714 | Tue Jan 21 00:00:00 2014 |       6
(7 rows)

-- aggregates in the PARTITION BY is also allows
SELECT
   avg(user_id), max(time), my_rank
FROM
(
  SELECT
    user_id, date_trunc('day', time) as time, rank() OVER my_win as my_rank
  FROM
    events_table
  GROUP BY
    user_id, date_trunc('day', time)
    WINDOW my_win AS (PARTITION BY user_id, avg(event_type%10)::int ORDER BY count(*) DESC)
) as foo
WHERE
  my_rank > 0
GROUP BY
  my_rank
ORDER BY
  3 DESC, 1 DESC,2 DESC
LIMIT
  10;
         avg         |           max            | my_rank 
---------------------+--------------------------+---------
 22.0000000000000000 | Fri Jan 10 00:00:00 2014 |       8
 60.4000000000000000 | Mon Jan 20 00:00:00 2014 |       7
 55.5500000000000000 | Tue Jan 21 00:00:00 2014 |       6
 50.6142857142857143 | Tue Jan 21 00:00:00 2014 |       5
 53.6697247706422018 | Tue Jan 21 00:00:00 2014 |       4
 49.7604166666666667 | Tue Jan 21 00:00:00 2014 |       3
 47.9569892473118280 | Tue Jan 21 00:00:00 2014 |       2
 49.5859375000000000 | Tue Jan 21 00:00:00 2014 |       1
(8 rows)

-- GROUP BY should not necessarly be inclusive of partitioning
-- but this query doesn't make much sense
SELECT
   avg(user_id), my_rank
FROM
(
  SELECT
    user_id, rank() OVER my_win as my_rank
  FROM
    events_table
  GROUP BY
    user_id
    WINDOW my_win AS (PARTITION BY user_id, max(event_type) ORDER BY count(*) DESC)
) as foo
GROUP BY
  my_rank
ORDER BY
  2 DESC, 1 DESC
LIMIT
  10;
         avg         | my_rank 
---------------------+---------
 50.0000000000000000 |       1
(1 row)

  -- Using previously defined supported window function on distribution key
SELECT * FROM (
  SELECT
    user_id, date_trunc('day', time) as time, sum(rank) OVER w2
  FROM (
    SELECT DISTINCT
      user_id as user_id, time, rank() over w1
    FROM users_table
    WINDOW
      w AS (PARTITION BY user_id),
      w1 AS (w ORDER BY value_2, value_3)
  ) fab
  WINDOW
    w2 as (PARTITION BY user_id, time)
) a
ORDER BY
  1, 2, 3 DESC
LIMIT
  10;
 user_id |           time           | sum 
---------+--------------------------+-----
       0 | Fri Jan 10 00:00:00 2014 |  32
       0 | Sat Jan 11 00:00:00 2014 |  40
       0 | Sat Jan 11 00:00:00 2014 |  38
       0 | Sat Jan 11 00:00:00 2014 |  30
       0 | Sun Jan 12 00:00:00 2014 |  49
       0 | Sun Jan 12 00:00:00 2014 |  47
       0 | Sun Jan 12 00:00:00 2014 |  34
       0 | Sun Jan 12 00:00:00 2014 |  29
       0 | Sun Jan 12 00:00:00 2014 |  24
       0 | Sun Jan 12 00:00:00 2014 |  20
(10 rows)

-- test with reference table partitioned on columns from both
SELECT *
FROM
(
    SELECT
      DISTINCT user_id, it_name, count(id) OVER (PARTITION BY user_id, id)
    FROM
      users_table, users_ref_test_table
    WHERE users_table.value_2=users_ref_test_table.k_no
) a
ORDER BY
  1, 2, 3
LIMIT
  20;
 user_id | it_name | count 
---------+---------+-------
       6 | User_4  |     1
       8 | User_4  |     1
       9 | User_3  |     1
      11 | User_3  |     1
      15 | User_6  |     1
      16 | User_2  |     1
      16 | User_3  |     1
      17 | User_3  |     1
      17 | User_4  |     1
      20 | User_3  |     1
      21 | User_6  |     1
      22 | User_1  |     1
      24 | User_4  |     1
      26 | User_2  |     2
      27 | User_4  |     1
      28 | User_2  |     1
      28 | User_3  |     1
      31 | User_1  |     1
      31 | User_4  |     1
      34 | User_3  |     1
(20 rows)

-- Group by has more columns than partition by
SELECT * FROM (
  SELECT
    DISTINCT user_id, SUM(value_2) OVER (PARTITION BY user_id)
  FROM
    users_table
  GROUP BY
    user_id, value_1, value_2
) a
ORDER BY
  2 DESC, 1
LIMIT
  10;
 user_id |  sum  
---------+-------
      46 | 63666
      23 | 62524
      56 | 61350
      12 | 61317
      48 | 60144
      71 | 60095
      45 | 59904
      94 | 59773
       3 | 59141
      93 | 58365
(10 rows)

SELECT user_id, max(sum) FROM (
  SELECT
    user_id, SUM(value_2) OVER (PARTITION BY user_id, value_1)
  FROM
    users_table
  GROUP BY
    user_id, value_1, value_2
) a
GROUP BY user_id ORDER BY
  2 DESC,1
LIMIT
  10;
 user_id | max  
---------+------
       1 | 2469
      87 | 2089
      81 | 1952
      23 | 1891
      58 | 1888
      97 | 1868
      94 | 1849
      17 | 1844
      22 | 1844
      43 | 1843
(10 rows)

-- Window functions with HAVING clause
SELECT * FROM (
  SELECT
    DISTINCT user_id, rank() OVER (PARTITION BY user_id ORDER BY value_1)
  FROM
    users_table
  GROUP BY
    user_id, value_1 HAVING count(*) > 1
) a
ORDER BY
  2 DESC, 1
LIMIT
  10;
 user_id | rank 
---------+------
      12 |   10
      55 |   10
      12 |    9
      25 |    9
      46 |    9
      55 |    9
      12 |    8
      25 |    8
      36 |    8
      46 |    8
(10 rows)

-- Window function in View works
SELECT *
FROM
  subq
ORDER BY
  2 DESC, 1
LIMIT
  10;
 user_id | rank 
---------+------
      12 |   10
      55 |   10
      12 |    9
      25 |    9
      46 |    9
      55 |    9
      12 |    8
      25 |    8
      36 |    8
      46 |    8
(10 rows)

-- Window functions with UNION/UNION ALL works
SELECT
  max(avg)
FROM
(
  (SELECT avg(value_3) over (partition by user_id), user_id FROM events_table where event_type IN (1, 2, 3, 4, 5))
    UNION ALL
  (SELECT avg(value_3) over (partition by user_id), user_id FROM events_table where event_type IN (6, 7, 8, 9, 10))
    UNION ALL
  (SELECT avg(value_3) over (partition by user_id), user_id FROM events_table where event_type IN (11, 12, 13, 14, 15))
    UNION ALL
  (SELECT avg(value_3) over (partition by user_id), user_id FROM events_table where event_type IN (16, 17, 18, 19, 20))
    UNION ALL
  (SELECT avg(value_3) over (partition by user_id), user_id FROM events_table where event_type IN (21, 22, 23, 24, 25))
    UNION ALL
  (SELECT avg(value_3) over (partition by user_id), user_id FROM events_table where event_type IN (26, 27, 28, 29, 30))
) b
GROUP BY user_id
ORDER BY 1 DESC
LIMIT 5;
 max 
-----
 996
 995
 987
 978
 974
(5 rows)

SELECT *
FROM (
        ( SELECT user_id,
                 sum(counter)
         FROM
           (SELECT
              user_id, sum(value_2) over (partition by user_id) AS counter
            FROM
              users_table
          UNION
            SELECT
              user_id, sum(value_2) over (partition by user_id) AS counter
            FROM
              events_table) user_id_1
         GROUP BY
          user_id)
      UNION
        (SELECT
            user_id, sum(counter)
         FROM
           (SELECT
              user_id, sum(value_2) over (partition by user_id) AS counter
            FROM
              users_table
          UNION
            SELECT
              user_id, sum(value_2) over (partition by user_id) AS counter
            FROM
              events_table) user_id_2
         GROUP BY
            user_id)) AS ftop
ORDER BY 2 DESC, 1 DESC
LIMIT 5;
 user_id |  sum   
---------+--------
      23 | 126017
      45 | 117323
      25 | 116595
      17 | 116520
      90 | 115843
(5 rows)

-- Subquery in where with window function
SELECT
  user_id
FROM
  users_table
WHERE
  value_2 > 545 AND
  value_2 < ALL (
    SELECT
      avg(value_3) OVER (PARTITION BY user_id)
    FROM
      events_table
    WHERE
      users_table.user_id = events_table.user_id
  )
GROUP BY
  user_id
ORDER BY
  user_id DESC
LIMIT
  3;
 user_id 
---------
      69
      52
      12
(3 rows)

-- Some more nested queries
SELECT
  user_id, rank, SUM(ABS(value_2 - value_3)) AS difference, COUNT(*) AS distinct_users
FROM (
  SELECT
    *, rank() OVER (PARTITION BY user_id ORDER BY value_2 DESC)
  FROM (
    SELECT
      user_id, value_2, sum(value_3) OVER (PARTITION BY user_id, value_2) as value_3
    FROM users_table
  ) AS A
) AS A
GROUP BY
  user_id, rank
ORDER BY
  difference DESC, rank DESC
LIMIT 20;
 user_id | rank | difference | distinct_users 
---------+------+------------+----------------
       2 |  101 |       3696 |              2
      73 |   98 |       3526 |              2
      73 |  103 |       3522 |              3
      97 |   73 |       3440 |              2
      43 |   92 |       3418 |              2
      57 |   75 |       3286 |              2
      66 |   64 |       3249 |              3
      42 |   97 |       3218 |              2
      19 |  101 |       3110 |              2
      91 |   94 |       3064 |              2
      71 |  100 |       3026 |              2
      59 |   69 |       3016 |              2
      46 |   83 |       2858 |              2
      16 |   86 |       2848 |              2
      23 |   63 |       2734 |              2
      62 |   96 |       2668 |              2
      81 |   84 |       2666 |              2
       7 |   74 |       2648 |              2
      27 |   97 |       2640 |              2
      55 |   76 |       2630 |              2
(20 rows)

SELECT * FROM (
  SELECT DISTINCT
    f3.user_id, ABS(f2.sum - f3.sum)
  FROM (
    SELECT DISTINCT
      user_id, sum(value_3) OVER (PARTITION BY user_id)
    FROM
      users_table
    GROUP BY
      user_id, value_3
  ) f3,
  (
  SELECT DISTINCT
    user_id, sum(value_2) OVER (PARTITION BY user_id)
  FROM
    users_table
  GROUP BY
    user_id, value_2
  ) f2
WHERE
  f3.user_id=f2.user_id
) a
ORDER BY
  abs DESC
LIMIT 10;
 user_id |  abs  
---------+-------
      64 | 10669
      74 | 10037
      26 |  9571
      76 |  9376
      81 |  8330
      16 |  7746
       9 |  7100
      98 |  6922
      94 |  6895
      93 |  6653
(10 rows)

-- Partition by with aggregate functions. This query does not make much sense since the
-- result of aggregate function will be the same for every row in a partition and it is
-- not going to affect the group that the count function will work on.
SELECT * FROM (
  SELECT
    user_id, COUNT(*) OVER (PARTITION BY user_id, MIN(value_2))
  FROM
    users_table
  GROUP BY
  1
) a
ORDER BY
  1 DESC
LIMIT
  5;
 user_id | count 
---------+-------
     100 |     1
      99 |     1
      98 |     1
      97 |     1
      96 |     1
(5 rows)

EXPLAIN (COSTS FALSE, VERBOSE TRUE)
    SELECT *
    FROM (
            ( SELECT user_id,
                     sum(counter)
             FROM
               (SELECT
                  user_id, sum(value_2) over (partition by user_id) AS counter
                FROM
                  users_table
              UNION
                SELECT
                  user_id, sum(value_2) over (partition by user_id) AS counter
                FROM
                  events_table) user_id_1
             GROUP BY
              user_id)
          UNION
            (SELECT
                user_id, sum(counter)
             FROM
               (SELECT
                  user_id, sum(value_2) over (partition by user_id) AS counter
                FROM
                  users_table
              UNION
                SELECT
                  user_id, sum(value_2) over (partition by user_id) AS counter
                FROM
                  events_table) user_id_2
             GROUP BY
                user_id)) AS ftop
    ORDER BY 2 DESC, 1 DESC
    LIMIT 5;
                                                                                                             QUERY PLAN                                                                                                             
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: remote_scan.user_id, remote_scan.sum
   ->  Sort
         Output: remote_scan.user_id, remote_scan.sum
         Sort Key: remote_scan.sum DESC, remote_scan.user_id DESC
         ->  Custom Scan (Citus Real-Time)
               Output: remote_scan.user_id, remote_scan.sum
               Task Count: 4
               Tasks Shown: One of 4
               ->  Task
                     Node: host=localhost port=57637 dbname=regression
                     ->  Limit
                           Output: users_table.user_id, (sum((sum(users_table.value_2) OVER (?))))
                           ->  Sort
                                 Output: users_table.user_id, (sum((sum(users_table.value_2) OVER (?))))
                                 Sort Key: (sum((sum(users_table.value_2) OVER (?)))) DESC, users_table.user_id DESC
                                 ->  HashAggregate
                                       Output: users_table.user_id, (sum((sum(users_table.value_2) OVER (?))))
                                       Group Key: users_table.user_id, (sum((sum(users_table.value_2) OVER (?))))
                                       ->  Append
                                             ->  HashAggregate
                                                   Output: users_table.user_id, sum((sum(users_table.value_2) OVER (?)))
                                                   Group Key: users_table.user_id
                                                   ->  HashAggregate
                                                         Output: users_table.user_id, (sum(users_table.value_2) OVER (?))
                                                         Group Key: users_table.user_id, (sum(users_table.value_2) OVER (?))
                                                         ->  Append
                                                               ->  WindowAgg
                                                                     Output: users_table.user_id, sum(users_table.value_2) OVER (?)
                                                                     ->  Index Scan using is_index1_1400000 on public.users_table_1400000 users_table
                                                                           Output: users_table.user_id, users_table."time", users_table.value_1, users_table.value_2, users_table.value_3, users_table.value_4
                                                               ->  WindowAgg
                                                                     Output: events_table.user_id, sum(events_table.value_2) OVER (?)
                                                                     ->  Index Scan using is_index2_1400004 on public.events_table_1400004 events_table
                                                                           Output: events_table.user_id, events_table."time", events_table.event_type, events_table.value_2, events_table.value_3, events_table.value_4
                                             ->  HashAggregate
                                                   Output: users_table_1.user_id, sum((sum(users_table_1.value_2) OVER (?)))
                                                   Group Key: users_table_1.user_id
                                                   ->  HashAggregate
                                                         Output: users_table_1.user_id, (sum(users_table_1.value_2) OVER (?))
                                                         Group Key: users_table_1.user_id, (sum(users_table_1.value_2) OVER (?))
                                                         ->  Append
                                                               ->  WindowAgg
                                                                     Output: users_table_1.user_id, sum(users_table_1.value_2) OVER (?)
                                                                     ->  Index Scan using is_index1_1400000 on public.users_table_1400000 users_table_1
                                                                           Output: users_table_1.user_id, users_table_1."time", users_table_1.value_1, users_table_1.value_2, users_table_1.value_3, users_table_1.value_4
                                                               ->  WindowAgg
                                                                     Output: events_table_1.user_id, sum(events_table_1.value_2) OVER (?)
                                                                     ->  Index Scan using is_index2_1400004 on public.events_table_1400004 events_table_1
                                                                           Output: events_table_1.user_id, events_table_1."time", events_table_1.event_type, events_table_1.value_2, events_table_1.value_3, events_table_1.value_4
(50 rows)

-- lets have some queries that Citus shouldn't push down
SELECT
   user_id, time, rnk
FROM
(
  SELECT
    *, rank() OVER my_win as rnk
  FROM
    events_table
    WINDOW my_win AS (PARTITION BY event_type ORDER BY time DESC)
) as foo
ORDER BY
  3 DESC, 1 DESC, 2 DESC
LIMIT
  10;
ERROR:  cannot push down this subquery
DETAIL:  Window functions with PARTITION BY list missing distribution column is currently unsupported
-- user needs to supply partition by which should
-- include the distribution key
SELECT
   user_id, time, rnk
FROM
(
  SELECT
    *, rank() OVER my_win as rnk
  FROM
    events_table
    WINDOW my_win AS ()
) as foo
ORDER BY
  3 DESC, 1 DESC, 2 DESC
LIMIT
  10;
ERROR:  cannot push down this subquery
DETAIL:  Window functions without PARTITION BY on distribution column is currently unsupported
-- user needs to supply partition by which should
-- include the distribution key
SELECT
   user_id, time, rnk
FROM
(
  SELECT
    *, rank() OVER my_win as rnk
  FROM
    events_table
    WINDOW my_win AS (ORDER BY time DESC)
) as foo
ORDER BY
  3 DESC, 1 DESC, 2 DESC
LIMIT
  10;
ERROR:  cannot push down this subquery
DETAIL:  Window functions without PARTITION BY on distribution column is currently unsupported
-- w2 should not be pushed down
SELECT * FROM
(
  SELECT
    DISTINCT users_table.user_id, lag(users_table.user_id) OVER w1, rank() OVER w2
  FROM
    users_table, events_table
  WHERE
    users_table.user_id = events_table.user_id and
    event_type < 25
  WINDOW w1 AS (PARTITION BY users_table.user_id, events_table.event_type ORDER BY events_table.time),
  w2 AS (PARTITION BY users_table.user_id+1, (events_table.value_2 % 25) ORDER BY events_table.time)
) as foo
ORDER BY 3 DESC, 1 DESC, 2 DESC NULLS LAST
LIMIT 10;
ERROR:  cannot push down this subquery
DETAIL:  Window functions with PARTITION BY list missing distribution column is currently unsupported
-- w2 should not be pushed down
SELECT * FROM
(
  SELECT
    DISTINCT users_table.user_id, lag(users_table.user_id) OVER w1, rank() OVER w2
  FROM
    users_table, events_table
  WHERE
    users_table.user_id = events_table.user_id and
    event_type < 25
  WINDOW w1 AS (PARTITION BY users_table.user_id, events_table.event_type ORDER BY events_table.time),
  w2 AS (ORDER BY events_table.time)
) as foo
ORDER BY
  3 DESC, 1 DESC, 2 DESC NULLS LAST
LIMIT
  10;
ERROR:  cannot push down this subquery
DETAIL:  Window functions without PARTITION BY on distribution column is currently unsupported
-- GROUP BY includes the partition key, but not the WINDOW function
SELECT
   user_id, time, my_rank
FROM
(
  SELECT
    user_id, date_trunc('day', time) as time, rank() OVER my_win as my_rank
  FROM
    events_table
  GROUP BY
    user_id, date_trunc('day', time)
    WINDOW my_win AS (ORDER BY avg(event_type))
) as foo
WHERE
  my_rank > 125
ORDER BY
  3 DESC, 1 DESC,2 DESC
LIMIT
  10;
ERROR:  cannot push down this subquery
DETAIL:  Window functions without PARTITION BY on distribution column is currently unsupported
-- GROUP BY includes the partition key, but not the WINDOW function
SELECT
   user_id, time, my_rank
FROM
(
  SELECT
    user_id, date_trunc('day', time) as time, rank() OVER my_win as my_rank
  FROM
    events_table
  GROUP BY
    user_id, date_trunc('day', time)
    WINDOW my_win AS (PARTITION BY date_trunc('day', time) ORDER BY avg(event_type))
) as foo
WHERE
  my_rank > 125
ORDER BY
  3 DESC, 1 DESC,2 DESC
LIMIT
  10;
ERROR:  cannot push down this subquery
DETAIL:  Window functions with PARTITION BY list missing distribution column is currently unsupported
-- Overriding window function but not supported
SELECT * FROM (
  SELECT
    user_id, date_trunc('day', time) as time, sum(rank) OVER w2
  FROM (
    SELECT DISTINCT
      user_id as user_id, time, rank() over w1
    FROM
      users_table
    WINDOW
      w AS (PARTITION BY time), w1 AS (w ORDER BY value_2, value_3)
  ) fab
  WINDOW
    w2 as (PARTITION BY user_id, time)
) a
ORDER BY
1,2,3;
ERROR:  cannot push down this subquery
DETAIL:  Window functions with PARTITION BY list missing distribution column is currently unsupported
-- Aggregate function on distribution column should error out
SELECT * FROM (
  SELECT
    user_id, COUNT(*) OVER (PARTITION BY sum(user_id), MIN(value_2))
  FROM
    users_table
  GROUP BY
    user_id
) a
ORDER BY
  1 DESC, 2 DESC;
ERROR:  cannot push down this subquery
DETAIL:  Window functions with PARTITION BY list missing distribution column is currently unsupported
-- test with reference table partitioned on only a column from reference table
SELECT *
FROM
(
    SELECT
      DISTINCT user_id, it_name, count(id) OVER (PARTITION BY id)
    FROM
      users_table, users_ref_test_table
) a
ORDER BY
  1, 2, 3
LIMIT
  20;
ERROR:  cannot push down this subquery
DETAIL:  Window functions with PARTITION BY list missing distribution column is currently unsupported
-- UNION ALL with only one of them is not partitioned over distribution column which
-- should not be allowed.
SELECT
  max(avg)
FROM
(
  (SELECT avg(value_3) over (partition by user_id), user_id FROM events_table where event_type IN (1, 2, 3, 4, 5))
    UNION ALL
  (SELECT avg(value_3) over (partition by user_id), user_id FROM events_table where event_type IN (6, 7, 8, 9, 10))
    UNION ALL
  (SELECT avg(value_3) over (partition by user_id), user_id FROM events_table where event_type IN (11, 12, 13, 14, 15))
    UNION ALL
  (SELECT avg(value_3) over (partition by user_id), user_id FROM events_table where event_type IN (16, 17, 18, 19, 20))
    UNION ALL
  (SELECT avg(value_3) over (partition by user_id), user_id FROM events_table where event_type IN (21, 22, 23, 24, 25))
    UNION ALL
  (SELECT avg(value_3) over (partition by event_type), user_id FROM events_table where event_type IN (26, 27, 28, 29, 30))
) b
GROUP BY user_id
ORDER BY 1 DESC
LIMIT 5;
ERROR:  cannot push down this subquery
DETAIL:  Window functions with PARTITION BY list missing distribution column is currently unsupported
-- UNION with only one subquery which has a partition on non-distribution column should
-- error out
SELECT *
FROM (
        ( SELECT user_id,
                 sum(counter)
         FROM
           (SELECT
              user_id, sum(value_2) over (partition by user_id) AS counter
            FROM
              users_table
          UNION
            SELECT
              user_id, sum(value_2) over (partition by user_id) AS counter
            FROM
              events_table) user_id_1
         GROUP BY
          user_id)
      UNION
        (SELECT
            user_id, sum(counter)
         FROM
           (SELECT
              user_id, sum(value_2) over (partition by user_id) AS counter
            FROM
              users_table
          UNION
            SELECT
              user_id, sum(value_2) over (partition by event_type) AS counter
            FROM
              events_table) user_id_2
         GROUP BY
            user_id)) AS ftop
ORDER BY 2 DESC, 1 DESC
LIMIT 5;
ERROR:  cannot push down this subquery
DETAIL:  Window functions with PARTITION BY list missing distribution column is currently unsupported
DROP VIEW subq;
