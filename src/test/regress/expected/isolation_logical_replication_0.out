Parsed test spec with 3 sessions

starting permutation: s3-acquire-advisory-lock s1-begin s1-move-placement s2-insert s3-release-advisory-lock s1-end
step s3-acquire-advisory-lock:
    SELECT pg_advisory_lock(44000, 55152);

pg_advisory_lock


step s1-begin:
	BEGIN;

step s1-move-placement:
    	SELECT master_move_shard_placement((SELECT * FROM selected_shard), 'localhost', 57637, 'localhost', 57638);

master_move_shard_placement


step s2-insert:
    INSERT INTO logical_replicate_placement VALUES (15, 15);
 <waiting ...>
step s3-release-advisory-lock:
    SELECT pg_advisory_unlock(44000, 55152);

pg_advisory_unlock

t
step s1-end:
	COMMIT;

step s2-insert: <... completed>

starting permutation: s3-acquire-advisory-lock s1-begin s1-move-placement s2-upsert s3-release-advisory-lock s1-end
step s3-acquire-advisory-lock:
    SELECT pg_advisory_lock(44000, 55152);

pg_advisory_lock


step s1-begin:
	BEGIN;

step s1-move-placement:
    	SELECT master_move_shard_placement((SELECT * FROM selected_shard), 'localhost', 57637, 'localhost', 57638);

master_move_shard_placement


step s2-upsert:
    INSERT INTO logical_replicate_placement VALUES (15, 15);

    INSERT INTO logical_replicate_placement VALUES (15, 15) ON CONFLICT (x) DO UPDATE SET y = logical_replicate_placement.y + 1;
 <waiting ...>
step s3-release-advisory-lock:
    SELECT pg_advisory_unlock(44000, 55152);

pg_advisory_unlock

t
step s1-end:
	COMMIT;

step s2-upsert: <... completed>

starting permutation: s3-acquire-advisory-lock s1-begin s1-move-placement s2-update s3-release-advisory-lock s1-end
step s3-acquire-advisory-lock:
    SELECT pg_advisory_lock(44000, 55152);

pg_advisory_lock


step s1-begin:
	BEGIN;

step s1-move-placement:
    	SELECT master_move_shard_placement((SELECT * FROM selected_shard), 'localhost', 57637, 'localhost', 57638);

master_move_shard_placement


step s2-update:
    UPDATE logical_replicate_placement SET y = y + 1 WHERE x = 15;
 <waiting ...>
step s3-release-advisory-lock:
    SELECT pg_advisory_unlock(44000, 55152);

pg_advisory_unlock

t
step s1-end:
	COMMIT;

step s2-update: <... completed>

starting permutation: s3-acquire-advisory-lock s1-begin s1-move-placement s2-delete s3-release-advisory-lock s1-end
step s3-acquire-advisory-lock:
    SELECT pg_advisory_lock(44000, 55152);

pg_advisory_lock


step s1-begin:
	BEGIN;

step s1-move-placement:
    	SELECT master_move_shard_placement((SELECT * FROM selected_shard), 'localhost', 57637, 'localhost', 57638);

master_move_shard_placement


step s2-delete:
    DELETE FROM logical_replicate_placement WHERE x = 15;
 <waiting ...>
step s3-release-advisory-lock:
    SELECT pg_advisory_unlock(44000, 55152);

pg_advisory_unlock

t
step s1-end:
	COMMIT;

step s2-delete: <... completed>

starting permutation: s3-acquire-advisory-lock s1-begin s1-move-placement s2-copy s3-release-advisory-lock s1-end
step s3-acquire-advisory-lock:
    SELECT pg_advisory_lock(44000, 55152);

pg_advisory_lock


step s1-begin:
	BEGIN;

step s1-move-placement:
    	SELECT master_move_shard_placement((SELECT * FROM selected_shard), 'localhost', 57637, 'localhost', 57638);

master_move_shard_placement


step s2-copy:
	COPY logical_replicate_placement FROM PROGRAM 'echo "1,1\n2,2\n3,3\n4,4\n5,5"' WITH CSV;
 <waiting ...>
step s3-release-advisory-lock:
    SELECT pg_advisory_unlock(44000, 55152);

pg_advisory_unlock

t
step s1-end:
	COMMIT;

step s2-copy: <... completed>

starting permutation: s1-begin s1-move-placement s2-truncate s1-end
step s1-begin:
	BEGIN;

step s1-move-placement:
    	SELECT master_move_shard_placement((SELECT * FROM selected_shard), 'localhost', 57637, 'localhost', 57638);

master_move_shard_placement


step s2-truncate:
	TRUNCATE logical_replicate_placement;
 <waiting ...>
step s1-end:
	COMMIT;

step s2-truncate: <... completed>

starting permutation: s1-begin s1-move-placement s2-alter-table s1-end
step s1-begin:
	BEGIN;

step s1-move-placement:
    	SELECT master_move_shard_placement((SELECT * FROM selected_shard), 'localhost', 57637, 'localhost', 57638);

master_move_shard_placement


step s2-alter-table:
	ALTER TABLE logical_replicate_placement ADD COLUMN z INT;
 <waiting ...>
step s1-end:
	COMMIT;

step s2-alter-table: <... completed>

starting permutation: s1-begin s2-truncate s1-move-placement s1-end
step s1-begin:
	BEGIN;

step s2-truncate:
	TRUNCATE logical_replicate_placement;

step s1-move-placement:
    	SELECT master_move_shard_placement((SELECT * FROM selected_shard), 'localhost', 57637, 'localhost', 57638);

master_move_shard_placement


step s1-end:
	COMMIT;


starting permutation: s1-begin s2-alter-table s1-move-placement s1-end
step s1-begin:
	BEGIN;

step s2-alter-table:
	ALTER TABLE logical_replicate_placement ADD COLUMN z INT;

step s1-move-placement:
    	SELECT master_move_shard_placement((SELECT * FROM selected_shard), 'localhost', 57637, 'localhost', 57638);

master_move_shard_placement


step s1-end:
	COMMIT;

