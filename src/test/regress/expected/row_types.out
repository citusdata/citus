-- Tests for row types on the target list
CREATE SCHEMA row_types;
SET search_path TO row_types;
CREATE TABLE test (x int, y int);
SELECT create_distributed_table('test','x');
 create_distributed_table 
--------------------------
 
(1 row)

CREATE OR REPLACE FUNCTION table_returner(INT) RETURNS TABLE(name text, id INT)
AS $$
BEGIN
    RETURN QUERY SELECT $1::text, $1;
END;
$$ language plpgsql;
SELECT create_distributed_function('table_returner(int)');
 create_distributed_function 
-----------------------------
 
(1 row)

CREATE OR REPLACE FUNCTION record_returner(INOUT id int, OUT name text)
RETURNS record
AS $$
BEGIN
    id := id + 1;
    name := 'returned';
END;
$$ language plpgsql;
SELECT create_distributed_function('record_returner(int)');
 create_distributed_function 
-----------------------------
 
(1 row)

CREATE OR REPLACE FUNCTION identity_returner(x anyelement)
RETURNS anyelement
AS $$
BEGIN
	RETURN x;
END;
$$ language plpgsql;
SELECT create_distributed_function('identity_returner(anyelement)');
 create_distributed_function 
-----------------------------
 
(1 row)

INSERT INTO test VALUES (1,2), (1,3), (2,2), (2,3);
-- multi-shard queries support row types
SELECT (x,y) FROM test ORDER BY x, y;
  row  
-------
 (1,2)
 (1,3)
 (2,2)
 (2,3)
(4 rows)

SELECT (x,y) FROM test GROUP BY x, y ORDER BY x, y;
  row  
-------
 (1,2)
 (1,3)
 (2,2)
 (2,3)
(4 rows)

SELECT ARRAY[NULL,(x,(y,x)),NULL,(y,(x,y))] FROM test ORDER BY x, y;
                    array                    
---------------------------------------------
 {NULL,"(1,\"(2,1)\")",NULL,"(2,\"(1,2)\")"}
 {NULL,"(1,\"(3,1)\")",NULL,"(3,\"(1,3)\")"}
 {NULL,"(2,\"(2,2)\")",NULL,"(2,\"(2,2)\")"}
 {NULL,"(2,\"(3,2)\")",NULL,"(3,\"(2,3)\")"}
(4 rows)

SELECT ARRAY[[(x,(y,x))],[(x,(x,y))]] FROM test ORDER BY x, y;
                 array                 
---------------------------------------
 {{"(1,\"(2,1)\")"},{"(1,\"(1,2)\")"}}
 {{"(1,\"(3,1)\")"},{"(1,\"(1,3)\")"}}
 {{"(2,\"(2,2)\")"},{"(2,\"(2,2)\")"}}
 {{"(2,\"(3,2)\")"},{"(2,\"(2,3)\")"}}
(4 rows)

select distinct (x,y) AS foo, x, y FROM test ORDER BY x, y;
  foo  | x | y 
-------+---+---
 (1,2) | 1 | 2
 (1,3) | 1 | 3
 (2,2) | 2 | 2
 (2,3) | 2 | 3
(4 rows)

SELECT table_returner(x) FROM test ORDER BY x, y;
 table_returner 
----------------
 (1,1)
 (1,1)
 (2,2)
 (2,2)
(4 rows)

SELECT record_returner(x) FROM test ORDER BY x, y;
 record_returner 
-----------------
 (2,returned)
 (2,returned)
 (3,returned)
 (3,returned)
(4 rows)

SELECT NULLIF((x, y), (y, x)) FROM test ORDER BY x, y;
 nullif 
--------
 (1,2)
 (1,3)
 
 (2,3)
(4 rows)

SELECT LEAST((x, y), (y, x)) FROM test ORDER BY x, y;
 least 
-------
 (1,2)
 (1,3)
 (2,2)
 (2,3)
(4 rows)

SELECT GREATEST((x, y), (y, x)) FROM test ORDER BY x, y;
 greatest 
----------
 (2,1)
 (3,1)
 (2,2)
 (3,2)
(4 rows)

SELECT COALESCE(NULL, (x, y), (y, x)) FROM test ORDER BY x, y;
 coalesce 
----------
 (1,2)
 (1,3)
 (2,2)
 (2,3)
(4 rows)

SELECT CASE x WHEN 2 THEN (x, y) ELSE (y, x) END FROM test ORDER BY x, y;
  row  
-------
 (2,1)
 (3,1)
 (2,2)
 (2,3)
(4 rows)

SELECT CASE x WHEN 2 THEN (x, y) END FROM test ORDER BY x, y;
 case  
-------
 
 
 (2,2)
 (2,3)
(4 rows)

-- varying shape unsupported
SELECT ARRAY[(x,(y,x),y),(y,(x,y))] FROM test ORDER BY x, y;
ERROR:  input of anonymous composite types is not implemented
SELECT ARRAY[[(x,(y,x))],[((x,x),y)]] FROM test ORDER BY x, y;
ERROR:  input of anonymous composite types is not implemented
SELECT CASE x WHEN 2 THEN (x, y, x) ELSE (y, x) END FROM test ORDER BY x, y;
ERROR:  input of anonymous composite types is not implemented
-- RECORD from polymorphic types unsupported
SELECT identity_returner((x, y)) FROM test ORDER BY x, y;
ERROR:  input of anonymous composite types is not implemented
SELECT array_agg((x, y)) FROM test;
ERROR:  input of anonymous composite types is not implemented
-- router queries support row types
SELECT (x,y) FROM test WHERE x = 1 ORDER BY x, y;
  row  
-------
 (1,2)
 (1,3)
(2 rows)

SELECT (x,y) AS foo FROM test WHERE x = 1 ORDER BY x, y;
  foo  
-------
 (1,2)
 (1,3)
(2 rows)

SELECT ARRAY[NULL,(x,(y,x)),NULL,(y,(x,y))] FROM test WHERE x = 1 ORDER BY x, y;
                    array                    
---------------------------------------------
 {NULL,"(1,\"(2,1)\")",NULL,"(2,\"(1,2)\")"}
 {NULL,"(1,\"(3,1)\")",NULL,"(3,\"(1,3)\")"}
(2 rows)

SELECT ARRAY[[(x,(y,x))],[(x,(x,y))]] FROM test WHERE x = 1 ORDER BY x, y;
                 array                 
---------------------------------------
 {{"(1,\"(2,1)\")"},{"(1,\"(1,2)\")"}}
 {{"(1,\"(3,1)\")"},{"(1,\"(1,3)\")"}}
(2 rows)

select distinct (x,y) AS foo, x, y FROM test WHERE x = 1 ORDER BY x, y;
  foo  | x | y 
-------+---+---
 (1,2) | 1 | 2
 (1,3) | 1 | 3
(2 rows)

SELECT table_returner(x) FROM test WHERE x = 1 ORDER BY x, y;
 table_returner 
----------------
 (1,1)
 (1,1)
(2 rows)

SELECT record_returner(x) FROM test WHERE x = 1 ORDER BY x, y;
 record_returner 
-----------------
 (2,returned)
 (2,returned)
(2 rows)

SELECT NULLIF((x, y), (y, x)) FROM test WHERE x = 1 ORDER BY x, y;
 nullif 
--------
 (1,2)
 (1,3)
(2 rows)

SELECT LEAST((x, y), (y, x)) FROM test WHERE x = 1 ORDER BY x, y;
 least 
-------
 (1,2)
 (1,3)
(2 rows)

SELECT GREATEST((x, y), (y, x)) FROM test WHERE x = 1 ORDER BY x, y;
 greatest 
----------
 (2,1)
 (3,1)
(2 rows)

SELECT COALESCE(NULL, (x, y), (y, x)) FROM test WHERE x = 1 ORDER BY x, y;
 coalesce 
----------
 (1,2)
 (1,3)
(2 rows)

SELECT CASE x WHEN 2 THEN (x, y) ELSE (y, x) END FROM test WHERE x = 1 ORDER BY x, y;
  row  
-------
 (2,1)
 (3,1)
(2 rows)

SELECT CASE x WHEN 2 THEN (x, y) END FROM test WHERE x = 1 ORDER BY x, y;
 case 
------
 
 
(2 rows)

-- varying shape unsupported
SELECT ARRAY[(x,(y,x),y),(y,(x,y))] FROM test WHERE x = 1 ORDER BY x, y;
ERROR:  input of anonymous composite types is not implemented
SELECT ARRAY[[(x,(y,x))],[((x,x),y)]] FROM test WHERE x = 1 ORDER BY x, y;
ERROR:  input of anonymous composite types is not implemented
SELECT CASE x WHEN 2 THEN (x, y, x) ELSE (y, x) END FROM test WHERE x = 1 ORDER BY x, y;
ERROR:  input of anonymous composite types is not implemented
-- RECORD from polymorphic types unsupported
SELECT identity_returner((x, y)) FROM test WHERE x = 1 ORDER BY x, y;
ERROR:  input of anonymous composite types is not implemented
SELECT array_agg((x, y)) FROM test WHERE x = 1;
ERROR:  input of anonymous composite types is not implemented
-- nested row expressions
SELECT (x,(x,y)) AS foo FROM test WHERE x = 1 ORDER BY x, y;
     foo     
-------------
 (1,"(1,2)")
 (1,"(1,3)")
(2 rows)

SELECT (x,record_returner(x)) FROM test WHERE x = 1 ORDER BY x, y;
        row         
--------------------
 (1,"(2,returned)")
 (1,"(2,returned)")
(2 rows)

-- table functions in row expressions are not supported
SELECT (x,table_returner(x)) FROM test WHERE x = 1 ORDER BY x, y;
ERROR:  input of anonymous composite types is not implemented
-- try prepared statements
PREPARE rec(int) AS SELECT (x,y*$1) FROM test WHERE x = $1  ORDER BY x, y;
EXECUTE rec(1);
  row  
-------
 (1,2)
 (1,3)
(2 rows)

EXECUTE rec(1);
  row  
-------
 (1,2)
 (1,3)
(2 rows)

EXECUTE rec(1);
  row  
-------
 (1,2)
 (1,3)
(2 rows)

EXECUTE rec(1);
  row  
-------
 (1,2)
 (1,3)
(2 rows)

EXECUTE rec(1);
  row  
-------
 (1,2)
 (1,3)
(2 rows)

EXECUTE rec(1);
  row  
-------
 (1,2)
 (1,3)
(2 rows)

SET client_min_messages TO error;
DROP SCHEMA row_types CASCADE;
