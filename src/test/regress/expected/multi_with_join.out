CREATE TABLE reference_table(user_id int);
SELECT create_reference_table('reference_table');
 create_reference_table 
------------------------
 
(1 row)

INSERT INTO reference_table VALUES (6), (7);
WITH users_events AS (
  SELECT 
      users_table.user_id as user_id,
      events_table.event_type as event_type
  FROM
      users_table,
      events_table
  WHERE
      users_table.user_id = events_table.user_id
  GROUP BY
      users_table.user_id,
      events_table.event_type
)
SELECT 
    *
FROM
    users_events
ORDER BY
  1, 2
LIMIT
  20;
 user_id | event_type 
---------+------------
       1 |          0
       1 |          1
       1 |          2
       1 |          3
       1 |          4
       1 |          6
       2 |          0
       2 |          1
       2 |          2
       2 |          3
       2 |          4
       2 |          5
       3 |          1
       3 |          2
       3 |          3
       3 |          4
       3 |          5
       4 |          0
       4 |          1
       4 |          2
(20 rows)

-- Two colocated CTE under a non-colocated join 
WITH colocated_1 AS (
  SELECT 
    users_table.user_id, events_table.value_2
  FROM
    users_table, events_table
  WHERE
    users_table.user_id = events_table.user_id AND event_type IN (1, 2, 3)
),
colocated_2 AS (
  SELECT 
    users_table.user_id, events_table.value_2
  FROM
    users_table, events_table
  WHERE
    users_table.user_id = events_table.user_id AND event_type IN (4, 5, 6)
)
SELECT colocated_1.user_id, count(*) 
FROM
  colocated_1, colocated_2
WHERE
  colocated_1.value_2 = colocated_2.value_2
GROUP BY
  1
ORDER BY
  2 DESC, 1;
 user_id | count 
---------+-------
       3 | 26792
       4 | 25024
       5 | 22724
       2 | 22554
       6 |  5720
       1 |  5593
(6 rows)

SET citus.task_executor_type TO 'task-tracker';
-- Two non-colocated CTE under a co-located join 
WITH non_colocated_1 AS (
  SELECT 
    users_table.user_id
  FROM
    users_table, events_table
  WHERE
    users_table.user_id = events_table.value_2 AND event_type IN (1, 2, 3)
),
non_colocated_2 AS (
  SELECT 
    users_table.user_id
  FROM
    users_table, events_table
  WHERE
    users_table.user_id = events_table.value_2 AND event_type IN (4, 5, 6)
)
SELECT non_colocated_1.user_id, count(*) 
FROM
  non_colocated_1, non_colocated_2
WHERE
  non_colocated_1.user_id = non_colocated_2.user_id
GROUP BY
  1
ORDER BY
  2 DESC, 1;
 user_id | count 
---------+-------
       2 | 60588
       4 | 21160
       3 | 13005
       5 | 10140
       1 |  4802
(5 rows)

  
WITH non_colocated AS (
  WITH colocated AS (
    SELECT 
      users_table.user_id as uid, events_table.value_2
    FROM 
      users_table, events_table
    WHERE
      users_table.user_id = events_table.user_id AND event_type IN (1, 2)
  ),
  colocated_2 AS (
    SELECT 
      users_table.user_id as uid, events_table.value_2
    FROM 
      users_table, events_table
    WHERE
      users_table.user_id = events_table.user_id AND event_type IN (3, 4)
  )
  SELECT
    colocated.uid, colocated.value_2
  FROM
    colocated, colocated_2
  WHERE
    colocated.value_2 = colocated_2.value_2
),
non_colocated_2 AS (
  SELECT 
    users_table.user_id as uid, events_table.value_2
  FROM
    users_table, events_table
  WHERE
    users_table.user_id = events_table.event_type AND event_type IN (5, 6)
)
SELECT
  sum(non_colocated.uid), sum(non_colocated.value_2), sum(non_colocated_2.value_2)
FROM
  non_colocated, non_colocated_2
WHERE 
  non_colocated.uid = non_colocated_2.uid
;
   sum    |   sum   |   sum   
----------+---------+---------
 19059280 | 8567392 | 8267120
(1 row)

-- this query doesn't make much sense though but tests colocated join and non-colocated join together
WITH users_events AS (
  WITH colocated_join AS (
    SELECT
      users_table.user_id as uid, events_table.event_type
    FROM
        users_table
      join
        events_table
      on (users_table.user_id = events_table.user_id)
    WHERE
      users_table.value_2 IN (1, 2)
  ),
  non_colocated_join AS (
    SELECT
      users_table.user_id as n_uid, events_table.event_type
    FROM
        users_table
      join
        events_table
      on (users_table.value_2 = events_table.value_2)
  )
  SELECT
    uid, colocated_join.event_type
  FROM
      colocated_join
    INNER join
      non_colocated_join
    on (colocated_join.event_type = non_colocated_join.event_type)
)
SELECT
  sum(uid), sum(event_type)
FROM
  users_events;
  sum   |  sum   
--------+--------
 972702 | 648967
(1 row)

SET citus.task_executor_type = 'real-time';
-- Subqueries in WHERE and FROM are mixed
-- In this query, only subquery in WHERE is not a colocated join
WITH users_events AS (
  WITH colocated_join AS (
    SELECT
      users_table.user_id as uid, event_type
    FROM
        users_table
      join
        events_table
      on (users_table.user_id = events_table.user_id)
    WHERE
      events_table.event_type IN (1, 2, 3)
  ),
  colocated_join_2 AS (
    SELECT
      users_table.user_id, event_type
    FROM
        users_table
      join
        events_table
      on (users_table.user_id = events_table.user_id)
    WHERE
      events_table.event_type IN (4, 5, 6)
  )
  SELECT
    uid, colocated_join.event_type
  FROM
    colocated_join,
    colocated_join_2
  WHERE
    colocated_join.uid = colocated_join_2.user_id AND
    colocated_join.event_type IN (
    WITH some_events AS (
      SELECT
        event_type
      FROM
        events_table
      WHERE 
        user_id < 100 
      GROUP BY 
        1 
      ORDER BY 
        1 
      LIMIT 10
    )
    SELECT
      *
    FROM
      some_events
  )
)
SELECT
  *
FROM
  users_events
ORDER BY 
  1, 2
LIMIT 
  20;
 uid | event_type 
-----+------------
   1 |          1
   1 |          1
   1 |          1
   1 |          1
   1 |          1
   1 |          1
   1 |          1
   1 |          1
   1 |          1
   1 |          1
   1 |          1
   1 |          1
   1 |          1
   1 |          1
   1 |          1
   1 |          1
   1 |          1
   1 |          1
   1 |          1
   1 |          1
(20 rows)

-- cte LEFT JOIN distributed_table should error out
WITH cte AS (
  SELECT * FROM users_table WHERE user_id = 1
)
SELECT cte.user_id, cte.time, events_table.event_type FROM cte LEFT JOIN events_table on cte.user_id=events_table.user_id
ORDER BY 
  1,2,3
LIMIT 
  10;
 user_id |              time               | event_type 
---------+---------------------------------+------------
       1 | Wed Nov 22 22:51:43.132261 2017 |          0
       1 | Wed Nov 22 22:51:43.132261 2017 |          0
       1 | Wed Nov 22 22:51:43.132261 2017 |          1
       1 | Wed Nov 22 22:51:43.132261 2017 |          1
       1 | Wed Nov 22 22:51:43.132261 2017 |          2
       1 | Wed Nov 22 22:51:43.132261 2017 |          2
       1 | Wed Nov 22 22:51:43.132261 2017 |          3
       1 | Wed Nov 22 22:51:43.132261 2017 |          3
       1 | Wed Nov 22 22:51:43.132261 2017 |          3
       1 | Wed Nov 22 22:51:43.132261 2017 |          4
(10 rows)

SELECT a.user_id, a.time, events_table.event_type FROM 
  (
    WITH cte AS (
      SELECT * FROM users_table WHERE user_id = 1
    )
    SELECT * FROM cte
  ) a
  LEFT JOIN 
    events_table 
  on 
    a.user_id=events_table.user_id
ORDER BY 
  1,2,3
LIMIT 
  10;
 user_id |              time               | event_type 
---------+---------------------------------+------------
       1 | Wed Nov 22 22:51:43.132261 2017 |          0
       1 | Wed Nov 22 22:51:43.132261 2017 |          0
       1 | Wed Nov 22 22:51:43.132261 2017 |          1
       1 | Wed Nov 22 22:51:43.132261 2017 |          1
       1 | Wed Nov 22 22:51:43.132261 2017 |          2
       1 | Wed Nov 22 22:51:43.132261 2017 |          2
       1 | Wed Nov 22 22:51:43.132261 2017 |          3
       1 | Wed Nov 22 22:51:43.132261 2017 |          3
       1 | Wed Nov 22 22:51:43.132261 2017 |          3
       1 | Wed Nov 22 22:51:43.132261 2017 |          4
(10 rows)

-- cte LEFT JOIN cte should work
WITH cte AS (
  SELECT * FROM users_table WHERE user_id IN (1, 2)
),
cte_2 AS (
  SELECT * FROM users_table WHERE user_id IN (2, 3)
)
SELECT cte.user_id, cte.time, cte_2.value_2 FROM cte LEFT JOIN cte_2 on cte.user_id=cte_2.user_id
ORDER BY 
  1,2,3
LIMIT 
  10;
 user_id |              time               | value_2 
---------+---------------------------------+---------
       1 | Wed Nov 22 22:51:43.132261 2017 |        
       1 | Thu Nov 23 03:32:50.803031 2017 |        
       1 | Thu Nov 23 09:26:42.145043 2017 |        
       1 | Thu Nov 23 11:11:24.40789 2017  |        
       1 | Thu Nov 23 11:44:57.515981 2017 |        
       1 | Thu Nov 23 17:23:03.441394 2017 |        
       1 | Thu Nov 23 17:30:34.635085 2017 |        
       2 | Wed Nov 22 18:19:49.944985 2017 |       0
       2 | Wed Nov 22 18:19:49.944985 2017 |       1
       2 | Wed Nov 22 18:19:49.944985 2017 |       1
(10 rows)

-- cte as a subquery in left join errors out
SELECT a.user_id, a.time, b.value_2 FROM 
  (
    WITH cte AS (
      SELECT * FROM users_table WHERE user_id IN (1, 2)
    )
    SELECT * FROM cte
  ) a
  LEFT JOIN 
  (
    WITH cte_2 AS (
      SELECT * FROM users_table WHERE user_id IN (2, 3)
    )
    SELECT * FROM cte_2
  ) b
  on 
    a.user_id=b.user_id
ORDER BY 
  1,2,3
LIMIT 
  10;
 user_id |              time               | value_2 
---------+---------------------------------+---------
       1 | Wed Nov 22 22:51:43.132261 2017 |        
       1 | Thu Nov 23 03:32:50.803031 2017 |        
       1 | Thu Nov 23 09:26:42.145043 2017 |        
       1 | Thu Nov 23 11:11:24.40789 2017  |        
       1 | Thu Nov 23 11:44:57.515981 2017 |        
       1 | Thu Nov 23 17:23:03.441394 2017 |        
       1 | Thu Nov 23 17:30:34.635085 2017 |        
       2 | Wed Nov 22 18:19:49.944985 2017 |       0
       2 | Wed Nov 22 18:19:49.944985 2017 |       1
       2 | Wed Nov 22 18:19:49.944985 2017 |       1
(10 rows)
-- cte JOIN reference_table should be router plannable
EXPLAIN (COSTS false, VERBOSE true)
WITH cte AS (
  SELECT * FROM users_table
)
SELECT * FROM cte join reference_table ON cte.user_id + 1 = reference_table.user_id;
                                                                                                             QUERY PLAN                                                                                                             
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (Citus Router)
   Output: remote_scan.user_id, remote_scan."time", remote_scan.value_1, remote_scan.value_2, remote_scan.value_3, remote_scan.value_4, remote_scan.user_id_1
   ->  Distributed Subplan
         ->  Custom Scan (Citus Real-Time)
               Output: remote_scan.user_id, remote_scan."time", remote_scan.value_1, remote_scan.value_2, remote_scan.value_3, remote_scan.value_4
               Task Count: 4
               Tasks Shown: One of 4
               ->  Task
                     Node: host=localhost port=57637 dbname=regression
                     ->  Seq Scan on public.users_table_1400000 users_table
                           Output: user_id, "time", value_1, value_2, value_3, value_4
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Node: host=localhost port=57638 dbname=regression
         ->  Merge Join
               Output: read_records_file.user_id, read_records_file."time", read_records_file.value_1, read_records_file.value_2, read_records_file.value_3, read_records_file.value_4, reference_table.user_id
               Merge Cond: (((read_records_file.user_id + 1)) = reference_table.user_id)
               ->  Sort
                     Output: read_records_file.user_id, read_records_file."time", read_records_file.value_1, read_records_file.value_2, read_records_file.value_3, read_records_file.value_4, ((read_records_file.user_id + 1))
                     Sort Key: ((read_records_file.user_id + 1))
                     ->  Function Scan on pg_catalog.read_intermediate_result read_records_file
                           Output: read_records_file.user_id, read_records_file."time", read_records_file.value_1, read_records_file.value_2, read_records_file.value_3, read_records_file.value_4, (read_records_file.user_id + 1)
                           Function Call: read_intermediate_result('30_0'::text, 'binary'::citus_copy_format)
               ->  Sort
                     Output: reference_table.user_id
                     Sort Key: reference_table.user_id
                     ->  Seq Scan on public.reference_table_360137 reference_table
                           Output: reference_table.user_id
(29 rows)

-- the most outer query is router plannable
EXPLAIN (COSTS false, VERBOSE true)
WITH cte_1 AS (
  WITH cte_1_1 AS (
    SELECT * FROM users_table WHERE value_2 IN (2, 3, 4)
  ),
  cte_1_2 AS (
    SELECT cte_1_1.user_id, event_type FROM cte_1_1, events_table where cte_1_1.user_id = events_table.user_id
  )
  SELECT * FROM cte_1_2 JOIN reference_table on cte_1_2.user_id = reference_table.user_id
)
SELECT * FROM cte_1;
                                                                                                     QUERY PLAN                                                                                                      
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (Citus Router)
   Output: remote_scan.user_id, remote_scan.event_type, remote_scan.user_id_1
   ->  Distributed Subplan
         ->  Custom Scan (Citus Router)
               Output: remote_scan.user_id, remote_scan.event_type, remote_scan.user_id_1
               ->  Distributed Subplan
                     ->  Custom Scan (Citus Real-Time)
                           Output: remote_scan.user_id, remote_scan."time", remote_scan.value_1, remote_scan.value_2, remote_scan.value_3, remote_scan.value_4
                           Task Count: 4
                           Tasks Shown: One of 4
                           ->  Task
                                 Node: host=localhost port=57637 dbname=regression
                                 ->  Seq Scan on public.users_table_1400000 users_table
                                       Output: user_id, "time", value_1, value_2, value_3, value_4
                                       Filter: (users_table.value_2 = ANY ('{2,3,4}'::integer[]))
                     ->  Custom Scan (Citus Real-Time)
                           Output: remote_scan.user_id, remote_scan.event_type
                           Task Count: 4
                           Tasks Shown: One of 4
                           ->  Task
                                 Node: host=localhost port=57637 dbname=regression
                                 ->  Hash Join
                                       Output: read_records_file.user_id, events_table.event_type
                                       Hash Cond: (read_records_file.user_id = events_table.user_id)
                                       ->  Function Scan on pg_catalog.read_intermediate_result read_records_file
                                             Output: read_records_file.user_id, read_records_file."time", read_records_file.value_1, read_records_file.value_2, read_records_file.value_3, read_records_file.value_4
                                             Function Call: read_intermediate_result('33_0'::text, 'binary'::citus_copy_format)
                                       ->  Hash
                                             Output: events_table.event_type, events_table.user_id
                                             ->  Seq Scan on public.events_table_1400004 events_table
                                                   Output: events_table.event_type, events_table.user_id
               Task Count: 1
               Tasks Shown: All
               ->  Task
                     Node: host=localhost port=57638 dbname=regression
                     ->  Merge Join
                           Output: read_records_file.user_id, read_records_file.event_type, reference_table.user_id
                           Merge Cond: (read_records_file.user_id = reference_table.user_id)
                           ->  Sort
                                 Output: read_records_file.user_id, read_records_file.event_type
                                 Sort Key: read_records_file.user_id
                                 ->  Function Scan on pg_catalog.read_intermediate_result read_records_file
                                       Output: read_records_file.user_id, read_records_file.event_type
                                       Function Call: read_intermediate_result('33_1'::text, 'binary'::citus_copy_format)
                           ->  Sort
                                 Output: reference_table.user_id
                                 Sort Key: reference_table.user_id
                                 ->  Seq Scan on public.reference_table_360137 reference_table
                                       Output: reference_table.user_id
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Node: host=localhost port=57638 dbname=regression
         ->  Function Scan on pg_catalog.read_intermediate_result read_records_file
               Output: read_records_file.user_id, read_records_file.event_type, read_records_file.user_id_1
               Function Call: read_intermediate_result('32_0'::text, 'binary'::citus_copy_format)
(56 rows)

-- Inner CTE should be router plannable
EXPLAIN (COSTS false, VERBOSE true)
WITH cte_1 AS (
  WITH cte_1_1 AS (
    SELECT * FROM users_table WHERE value_2 IN (2, 3, 4)
  ),
  cte_1_2 AS (
    SELECT cte_1_1.user_id, event_type FROM cte_1_1, events_table where cte_1_1.user_id = events_table.user_id
  )
  SELECT * FROM cte_1_2 JOIN reference_table on cte_1_2.user_id = reference_table.user_id
)
SELECT * FROM cte_1 JOIN events_table on cte_1.event_type=events_table.event_type;
                                                                                                                    QUERY PLAN                                                                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Custom Scan (Citus Real-Time)
   Output: remote_scan.user_id, remote_scan.event_type, remote_scan.user_id_1, remote_scan.user_id_2, remote_scan."time", remote_scan.event_type_1, remote_scan.value_2, remote_scan.value_3, remote_scan.value_4
   ->  Distributed Subplan
         ->  Custom Scan (Citus Router)
               Output: remote_scan.user_id, remote_scan.event_type, remote_scan.user_id_1
               ->  Distributed Subplan
                     ->  Custom Scan (Citus Real-Time)
                           Output: remote_scan.user_id, remote_scan."time", remote_scan.value_1, remote_scan.value_2, remote_scan.value_3, remote_scan.value_4
                           Task Count: 4
                           Tasks Shown: One of 4
                           ->  Task
                                 Node: host=localhost port=57637 dbname=regression
                                 ->  Seq Scan on public.users_table_1400000 users_table
                                       Output: user_id, "time", value_1, value_2, value_3, value_4
                                       Filter: (users_table.value_2 = ANY ('{2,3,4}'::integer[]))
                     ->  Custom Scan (Citus Real-Time)
                           Output: remote_scan.user_id, remote_scan.event_type
                           Task Count: 4
                           Tasks Shown: One of 4
                           ->  Task
                                 Node: host=localhost port=57637 dbname=regression
                                 ->  Hash Join
                                       Output: read_records_file.user_id, events_table.event_type
                                       Hash Cond: (read_records_file.user_id = events_table.user_id)
                                       ->  Function Scan on pg_catalog.read_intermediate_result read_records_file
                                             Output: read_records_file.user_id, read_records_file."time", read_records_file.value_1, read_records_file.value_2, read_records_file.value_3, read_records_file.value_4
                                             Function Call: read_intermediate_result('37_0'::text, 'binary'::citus_copy_format)
                                       ->  Hash
                                             Output: events_table.event_type, events_table.user_id
                                             ->  Seq Scan on public.events_table_1400004 events_table
                                                   Output: events_table.event_type, events_table.user_id
               Task Count: 1
               Tasks Shown: All
               ->  Task
                     Node: host=localhost port=57638 dbname=regression
                     ->  Merge Join
                           Output: read_records_file.user_id, read_records_file.event_type, reference_table.user_id
                           Merge Cond: (read_records_file.user_id = reference_table.user_id)
                           ->  Sort
                                 Output: read_records_file.user_id, read_records_file.event_type
                                 Sort Key: read_records_file.user_id
                                 ->  Function Scan on pg_catalog.read_intermediate_result read_records_file
                                       Output: read_records_file.user_id, read_records_file.event_type
                                       Function Call: read_intermediate_result('37_1'::text, 'binary'::citus_copy_format)
                           ->  Sort
                                 Output: reference_table.user_id
                                 Sort Key: reference_table.user_id
                                 ->  Seq Scan on public.reference_table_360137 reference_table
                                       Output: reference_table.user_id
   Task Count: 4
   Tasks Shown: One of 4
   ->  Task
         Node: host=localhost port=57637 dbname=regression
         ->  Hash Join
               Output: read_records_file.user_id, read_records_file.event_type, read_records_file.user_id_1, events_table.user_id, events_table."time", events_table.event_type, events_table.value_2, events_table.value_3, events_table.value_4
               Hash Cond: (read_records_file.event_type = events_table.event_type)
               ->  Function Scan on pg_catalog.read_intermediate_result read_records_file
                     Output: read_records_file.user_id, read_records_file.event_type, read_records_file.user_id_1
                     Function Call: read_intermediate_result('36_0'::text, 'binary'::citus_copy_format)
               ->  Hash
                     Output: events_table.user_id, events_table."time", events_table.event_type, events_table.value_2, events_table.value_3, events_table.value_4
                     ->  Seq Scan on public.events_table_1400004 events_table
                           Output: events_table.user_id, events_table."time", events_table.event_type, events_table.value_2, events_table.value_3, events_table.value_4
(63 rows)

