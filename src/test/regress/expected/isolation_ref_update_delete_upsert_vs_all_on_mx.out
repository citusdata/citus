Parsed test spec with 3 sessions

starting permutation: s1-add-primary-key s1-start-session-level-connection s1-begin-on-worker s1-upsert s2-start-session-level-connection s2-begin-on-worker s2-select s1-commit-worker s2-commit-worker s1-stop-connection s2-stop-connection s3-select-count
create_reference_table


step s1-add-primary-key:
	ALTER TABLE ref_table ADD CONSTRAINT pri_key PRIMARY KEY (id);

step s1-start-session-level-connection:
        SELECT start_session_level_connection_to_node('localhost', 57637);

start_session_level_connection_to_node


step s1-begin-on-worker:
        SELECT run_commands_on_session_level_connection_to_node('BEGIN');

run_commands_on_session_level_connection_to_node


step s1-upsert:
	SELECT run_commands_on_session_level_connection_to_node('INSERT INTO ref_table VALUES (1, 3), (2, 3) ON CONFLICT (id) DO UPDATE SET value=3');

run_commands_on_session_level_connection_to_node


step s2-start-session-level-connection:
        SELECT start_session_level_connection_to_node('localhost', 57638);

start_session_level_connection_to_node


step s2-begin-on-worker:
        SELECT run_commands_on_session_level_connection_to_node('BEGIN');

run_commands_on_session_level_connection_to_node


step s2-select:
	SELECT run_commands_on_session_level_connection_to_node('SELECT * FROM ref_table WHERE id=1 OR id=2');

run_commands_on_session_level_connection_to_node


step s1-commit-worker:
	SELECT run_commands_on_session_level_connection_to_node('COMMIT');

run_commands_on_session_level_connection_to_node


step s2-commit-worker:
        SELECT run_commands_on_session_level_connection_to_node('COMMIT');

run_commands_on_session_level_connection_to_node


step s1-stop-connection:
	SELECT stop_session_level_connection_to_node();

stop_session_level_connection_to_node


step s2-stop-connection:
        SELECT stop_session_level_connection_to_node();

stop_session_level_connection_to_node


step s3-select-count:
	SELECT COUNT(*) FROM ref_table;

count

2
restore_isolation_tester_func



starting permutation: s1-start-session-level-connection s1-begin-on-worker s1-delete s2-start-session-level-connection s2-begin-on-worker s2-insert-select-ref-table s1-commit-worker s2-commit-worker s1-stop-connection s2-stop-connection s3-select-count
create_reference_table


step s1-start-session-level-connection:
        SELECT start_session_level_connection_to_node('localhost', 57637);

start_session_level_connection_to_node


step s1-begin-on-worker:
        SELECT run_commands_on_session_level_connection_to_node('BEGIN');

run_commands_on_session_level_connection_to_node


step s1-delete:
	SELECT run_commands_on_session_level_connection_to_node('DELETE FROM ref_table WHERE id=1 OR id=2');

run_commands_on_session_level_connection_to_node


step s2-start-session-level-connection:
        SELECT start_session_level_connection_to_node('localhost', 57638);

start_session_level_connection_to_node


step s2-begin-on-worker:
        SELECT run_commands_on_session_level_connection_to_node('BEGIN');

run_commands_on_session_level_connection_to_node


step s2-insert-select-ref-table:
	SELECT run_commands_on_session_level_connection_to_node('INSERT INTO ref_table SELECT * FROM ref_table');
 <waiting ...>
step s1-commit-worker:
	SELECT run_commands_on_session_level_connection_to_node('COMMIT');

run_commands_on_session_level_connection_to_node


step s2-insert-select-ref-table: <... completed>
run_commands_on_session_level_connection_to_node


step s2-commit-worker:
        SELECT run_commands_on_session_level_connection_to_node('COMMIT');

run_commands_on_session_level_connection_to_node


step s1-stop-connection:
	SELECT stop_session_level_connection_to_node();

stop_session_level_connection_to_node


step s2-stop-connection:
        SELECT stop_session_level_connection_to_node();

stop_session_level_connection_to_node


step s3-select-count:
	SELECT COUNT(*) FROM ref_table;

count

0
restore_isolation_tester_func



starting permutation: s1-add-primary-key s1-start-session-level-connection s1-begin-on-worker s1-upsert s2-start-session-level-connection s2-begin-on-worker s2-drop s1-commit-worker s2-commit-worker s1-stop-connection s2-stop-connection s3-select-count
create_reference_table


step s1-add-primary-key:
	ALTER TABLE ref_table ADD CONSTRAINT pri_key PRIMARY KEY (id);

step s1-start-session-level-connection:
        SELECT start_session_level_connection_to_node('localhost', 57637);

start_session_level_connection_to_node


step s1-begin-on-worker:
        SELECT run_commands_on_session_level_connection_to_node('BEGIN');

run_commands_on_session_level_connection_to_node


step s1-upsert:
	SELECT run_commands_on_session_level_connection_to_node('INSERT INTO ref_table VALUES (1, 3), (2, 3) ON CONFLICT (id) DO UPDATE SET value=3');

run_commands_on_session_level_connection_to_node


step s2-start-session-level-connection:
        SELECT start_session_level_connection_to_node('localhost', 57638);

start_session_level_connection_to_node


step s2-begin-on-worker:
        SELECT run_commands_on_session_level_connection_to_node('BEGIN');

run_commands_on_session_level_connection_to_node


step s2-drop:
	DROP TABLE ref_table;
 <waiting ...>
step s1-commit-worker:
	SELECT run_commands_on_session_level_connection_to_node('COMMIT');

run_commands_on_session_level_connection_to_node


step s2-drop: <... completed>
step s2-commit-worker:
        SELECT run_commands_on_session_level_connection_to_node('COMMIT');

run_commands_on_session_level_connection_to_node


step s1-stop-connection:
	SELECT stop_session_level_connection_to_node();

stop_session_level_connection_to_node


step s2-stop-connection:
        SELECT stop_session_level_connection_to_node();

stop_session_level_connection_to_node


step s3-select-count:
	SELECT COUNT(*) FROM ref_table;

ERROR:  relation "ref_table" does not exist
restore_isolation_tester_func



starting permutation: s1-start-session-level-connection s1-begin-on-worker s1-delete s2-start-session-level-connection s2-begin-on-worker s2-truncate s1-commit-worker s2-commit-worker s1-stop-connection s2-stop-connection s3-select-count
create_reference_table


step s1-start-session-level-connection:
        SELECT start_session_level_connection_to_node('localhost', 57637);

start_session_level_connection_to_node


step s1-begin-on-worker:
        SELECT run_commands_on_session_level_connection_to_node('BEGIN');

run_commands_on_session_level_connection_to_node


step s1-delete:
	SELECT run_commands_on_session_level_connection_to_node('DELETE FROM ref_table WHERE id=1 OR id=2');

run_commands_on_session_level_connection_to_node


step s2-start-session-level-connection:
        SELECT start_session_level_connection_to_node('localhost', 57638);

start_session_level_connection_to_node


step s2-begin-on-worker:
        SELECT run_commands_on_session_level_connection_to_node('BEGIN');

run_commands_on_session_level_connection_to_node


step s2-truncate:
	SELECT run_commands_on_session_level_connection_to_node('TRUNCATE ref_table');
 <waiting ...>
step s1-commit-worker:
	SELECT run_commands_on_session_level_connection_to_node('COMMIT');

run_commands_on_session_level_connection_to_node


step s2-truncate: <... completed>
run_commands_on_session_level_connection_to_node


step s2-commit-worker:
        SELECT run_commands_on_session_level_connection_to_node('COMMIT');

run_commands_on_session_level_connection_to_node


step s1-stop-connection:
	SELECT stop_session_level_connection_to_node();

stop_session_level_connection_to_node


step s2-stop-connection:
        SELECT stop_session_level_connection_to_node();

stop_session_level_connection_to_node


step s3-select-count:
	SELECT COUNT(*) FROM ref_table;

count

0
restore_isolation_tester_func


