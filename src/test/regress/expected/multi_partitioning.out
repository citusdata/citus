ALTER SEQUENCE pg_catalog.pg_dist_shardid_seq RESTART 1660000;
CREATE TABLE partitioning_test(id int, time date) PARTITION BY RANGE (time);
 
-- create its partitions
CREATE TABLE partitioning_test_2009 PARTITION OF partitioning_test FOR VALUES FROM ('2009-01-01') TO ('2010-01-01');
CREATE TABLE partitioning_test_2010 PARTITION OF partitioning_test FOR VALUES FROM ('2010-01-01') TO ('2011-01-01');
-- load some data and distribute tables
INSERT INTO partitioning_test VALUES (1, '2009-06-06');
INSERT INTO partitioning_test VALUES (2, '2010-07-07');
INSERT INTO partitioning_test_2009 VALUES (3, '2009-09-09');
INSERT INTO partitioning_test_2010 VALUES (4, '2010-03-03');
SET citus.shard_count TO 4;
SET citus.shard_replication_factor TO 1;
-- this should error out given that parent of the partition is not distributed
SELECT create_distributed_table('partitioning_test_2010', 'id');
ERROR:  cannot distributed relation "partitioning_test_2010" which is partition of "partitioning_test"
DETAIL:  Citus does not support partitioning among local tables and distributed tables
HINT:  First distribute the partitioned table  "partitioning_test"
-- this should suceed
SELECT create_distributed_table('partitioning_test', 'id');
NOTICE:  Copying data from local table...
NOTICE:  Copying data from local table...
 create_distributed_table 
--------------------------
 
(1 row)

-- check the data
SELECT * FROM partitioning_test ORDER BY 1;
 id |    time    
----+------------
  1 | 06-06-2009
  2 | 07-07-2010
  3 | 09-09-2009
  4 | 03-03-2010
(4 rows)

-- check the metadata
SELECT 
	* 
FROM 
	pg_dist_partition 
WHERE 
	logicalrelid IN ('partitioning_test', 'partitioning_test_2009', 'partitioning_test_2010')
ORDER BY 1;
      logicalrelid      | partmethod |                                                        partkey                                                         | colocationid | repmodel 
------------------------+------------+------------------------------------------------------------------------------------------------------------------------+--------------+----------
 partitioning_test      | h          | {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattno 1 :location -1} |            2 | c
 partitioning_test_2009 | h          | {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattno 1 :location -1} |            2 | c
 partitioning_test_2010 | h          | {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattno 1 :location -1} |            2 | c
(3 rows)

SELECT 
	logicalrelid, count(*) 
FROM pg_dist_shard 
	WHERE logicalrelid IN ('partitioning_test', 'partitioning_test_2009', 'partitioning_test_2010')
GROUP BY
	logicalrelid
ORDER BY
	1,2;
      logicalrelid      | count 
------------------------+-------
 partitioning_test      |     4
 partitioning_test_2009 |     4
 partitioning_test_2010 |     4
(3 rows)

SELECT 
	nodename, nodeport, count(*)	
FROM
	pg_dist_shard_placement
WHERE
	shardid IN (SELECT shardid FROM pg_dist_shard WHERE logicalrelid IN ('partitioning_test', 'partitioning_test_2009', 'partitioning_test_2010') )
GROUP BY
	nodename, nodeport
ORDER BY
	1,2,3;
 nodename  | nodeport | count 
-----------+----------+-------
 localhost |    57637 |     6
 localhost |    57638 |     6
(2 rows)

-- now create a partition and see that it also becomes a distributed table
CREATE TABLE partitioning_test_2011 PARTITION OF partitioning_test FOR VALUES FROM ('2011-01-01') TO ('2012-01-01');
SELECT 
	* 
FROM 
	pg_dist_partition 
WHERE 
	logicalrelid IN ('partitioning_test', 'partitioning_test_2009', 'partitioning_test_2010', 'partitioning_test_2011')
ORDER BY 1;
      logicalrelid      | partmethod |                                                        partkey                                                         | colocationid | repmodel 
------------------------+------------+------------------------------------------------------------------------------------------------------------------------+--------------+----------
 partitioning_test      | h          | {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattno 1 :location -1} |            2 | c
 partitioning_test_2009 | h          | {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattno 1 :location -1} |            2 | c
 partitioning_test_2010 | h          | {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattno 1 :location -1} |            2 | c
 partitioning_test_2011 | h          | {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattno 1 :location -1} |            2 | c
(4 rows)

SELECT 
	logicalrelid, count(*) 
FROM pg_dist_shard 
	WHERE logicalrelid IN ('partitioning_test', 'partitioning_test_2009', 'partitioning_test_2010', 'partitioning_test_2011')
GROUP BY
	logicalrelid
ORDER BY
	1,2;
      logicalrelid      | count 
------------------------+-------
 partitioning_test      |     4
 partitioning_test_2009 |     4
 partitioning_test_2010 |     4
 partitioning_test_2011 |     4
(4 rows)

SELECT 
	nodename, nodeport, count(*)	
FROM
	pg_dist_shard_placement
WHERE
	shardid IN (SELECT shardid FROM pg_dist_shard WHERE logicalrelid IN ('partitioning_test', 'partitioning_test_2009', 'partitioning_test_2010', 'partitioning_test_2011') )
GROUP BY
	nodename, nodeport
ORDER BY
	1,2,3;
 nodename  | nodeport | count 
-----------+----------+-------
 localhost |    57637 |     8
 localhost |    57638 |     8
(2 rows)

-- citus can also support ALTER TABLE .. ATTACH PARTITION 
-- even if the partition is not distributed
CREATE TABLE partitioning_test_2012(id int, time date);
ALTER TABLE partitioning_test ATTACH PARTITION partitioning_test_2012 FOR VALUES FROM ('2012-01-01') TO ('2013-01-01');
SELECT 
	* 
FROM 
	pg_dist_partition 
WHERE 
	logicalrelid IN ('partitioning_test', 'partitioning_test_2009', 'partitioning_test_2010', 'partitioning_test_2011', 'partitioning_test_2012')
ORDER BY 1;
      logicalrelid      | partmethod |                                                        partkey                                                         | colocationid | repmodel 
------------------------+------------+------------------------------------------------------------------------------------------------------------------------+--------------+----------
 partitioning_test      | h          | {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattno 1 :location -1} |            2 | c
 partitioning_test_2009 | h          | {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattno 1 :location -1} |            2 | c
 partitioning_test_2010 | h          | {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattno 1 :location -1} |            2 | c
 partitioning_test_2011 | h          | {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattno 1 :location -1} |            2 | c
 partitioning_test_2012 | h          | {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattno 1 :location -1} |            2 | c
(5 rows)

SELECT 
	logicalrelid, count(*) 
FROM pg_dist_shard 
	WHERE logicalrelid IN ('partitioning_test', 'partitioning_test_2009', 'partitioning_test_2010', 'partitioning_test_2011', 'partitioning_test_2012')
GROUP BY
	logicalrelid
ORDER BY
	1,2;
      logicalrelid      | count 
------------------------+-------
 partitioning_test      |     4
 partitioning_test_2009 |     4
 partitioning_test_2010 |     4
 partitioning_test_2011 |     4
 partitioning_test_2012 |     4
(5 rows)

SELECT 
	nodename, nodeport, count(*)	
FROM
	pg_dist_shard_placement
WHERE
	shardid IN (SELECT shardid FROM pg_dist_shard WHERE logicalrelid IN ('partitioning_test', 'partitioning_test_2009', 'partitioning_test_2010', 'partitioning_test_2011', 'partitioning_test_2012') )
GROUP BY
	nodename, nodeport
ORDER BY
	1,2,3;
 nodename  | nodeport | count 
-----------+----------+-------
 localhost |    57637 |    10
 localhost |    57638 |    10
(2 rows)

-- dropping the parent should CASCADE to the children as well
DROP TABLE partitioning_test;
\d+ partitioning_test*
-- set the colocationid sequence back to 1 to make sure
-- that this file does not break other tests
ALTER SEQUENCE pg_catalog.pg_dist_colocationid_seq RESTART 1;
