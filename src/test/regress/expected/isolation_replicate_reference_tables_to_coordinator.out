Parsed test spec with 4 sessions

starting permutation: add-node s1-begin s2-begin s1-update-dist-table s2-lock-ref-table-placement-on-coordinator s1-lock-ref-table-placement-on-coordinator s2-update-dist-table deadlock-checker-call s1-end s2-end
create_distributed_table
---------------------------------------------------------------------

(1 row)

step add-node:
  SELECT 1 FROM master_add_node('localhost', 57636, groupid => 0);

?column?
---------------------------------------------------------------------
       1
(1 row)

step s1-begin:
    BEGIN;

step s2-begin:
    BEGIN;

step s1-update-dist-table:
    update dist_table set b = 2 where a = 1;

step s2-lock-ref-table-placement-on-coordinator:
    DO $$
      DECLARE refshardid int;
      BEGIN
        SELECT shardid INTO refshardid FROM pg_dist_shard WHERE logicalrelid='ref_table'::regclass;
        EXECUTE format('SELECT * from ref_table_%s FOR UPDATE', refshardid::text);
      END
    $$;

step s1-lock-ref-table-placement-on-coordinator:
    DO $$
      DECLARE refshardid int;
      BEGIN
        SELECT shardid INTO refshardid FROM pg_dist_shard WHERE logicalrelid='ref_table'::regclass;
        EXECUTE format('SELECT * from ref_table_%s FOR UPDATE', refshardid::text);
      END
    $$;
 <waiting ...>
step s2-update-dist-table: 
    update dist_table set b = 2 where a = 1;
 <waiting ...>
step deadlock-checker-call: 
  SELECT check_distributed_deadlocks();

check_distributed_deadlocks
---------------------------------------------------------------------
t
(1 row)

step s1-lock-ref-table-placement-on-coordinator: <... completed>
step s2-update-dist-table: <... completed>
ERROR:  canceling the transaction since it was involved in a distributed deadlock
step s1-end:
    END;

step s2-end:
    END;

master_remove_node
---------------------------------------------------------------------

(1 row)


starting permutation: add-node s1-begin s2-begin s1-update-ref-table s2-sleep s2-view-dist s2-view-worker s2-end s1-end
create_distributed_table
---------------------------------------------------------------------

(1 row)

step add-node:
  SELECT 1 FROM master_add_node('localhost', 57636, groupid => 0);

?column?
---------------------------------------------------------------------
       1
(1 row)

step s1-begin:
    BEGIN;

step s2-begin:
    BEGIN;

step s1-update-ref-table:
    update ref_table set a = a + 1;

step s2-sleep:
	SELECT pg_sleep(0.5);

pg_sleep
---------------------------------------------------------------------

(1 row)

step s2-view-dist:
        SELECT query, query_hostname, query_hostport, distributed_query_host_name, distributed_query_host_port, state, wait_event_type, wait_event, usename, datname FROM citus_dist_stat_activity WHERE query NOT ILIKE '%pg_prepared_xacts%' AND query NOT ILIKE '%COMMIT%' AND query NOT ILIKE '%pg_isolation_test_session_is_blocked%' AND query NOT ILIKE '%BEGIN%' AND query NOT ILIKE '%add_node%' ORDER BY query DESC;

query                                    |query_hostname  |query_hostport|distributed_query_host_name|distributed_query_host_port|state              |wait_event_type|wait_event|usename |datname
---------------------------------------------------------------------

  SELECT check_distributed_deadlocks();
|coordinator_host|         57636|                           |                          0|idle               |Client         |ClientRead|postgres|regression

    update ref_table set a = a + 1;
    |coordinator_host|         57636|                           |                          0|idle in transaction|Client         |ClientRead|postgres|regression
(2 rows)

step s2-view-worker:
	SELECT query, query_hostname, query_hostport, distributed_query_host_name,
           distributed_query_host_port, state, wait_event_type, wait_event, usename, datname
    FROM citus_worker_stat_activity
    WHERE query NOT ILIKE '%pg_prepared_xacts%' AND
          query NOT ILIKE '%COMMIT%' AND
          query NOT ILIKE '%dump_local_%' AND
          query NOT ILIKE '%citus_internal_local_blocked_processes%' AND
          query NOT ILIKE '%add_node%'
    ORDER BY query, query_hostport DESC;

query                                                                        |query_hostname|query_hostport|distributed_query_host_name|distributed_query_host_port|state              |wait_event_type|wait_event|usename |datname
---------------------------------------------------------------------
UPDATE public.ref_table_1500777 ref_table SET a = (a OPERATOR(pg_catalog.+) 1)|localhost     |         57638|                           |                          0|idle in transaction|Client         |ClientRead|postgres|regression
UPDATE public.ref_table_1500777 ref_table SET a = (a OPERATOR(pg_catalog.+) 1)|localhost     |         57637|                           |                          0|idle in transaction|Client         |ClientRead|postgres|regression
(2 rows)

step s2-end:
    END;

step s1-end:
    END;

master_remove_node
---------------------------------------------------------------------

(1 row)


starting permutation: add-node s1-begin s2-begin s1-update-ref-table s2-active-transactions s1-end s2-end
create_distributed_table
---------------------------------------------------------------------

(1 row)

step add-node:
  SELECT 1 FROM master_add_node('localhost', 57636, groupid => 0);

?column?
---------------------------------------------------------------------
       1
(1 row)

step s1-begin:
    BEGIN;

step s2-begin:
    BEGIN;

step s1-update-ref-table:
    update ref_table set a = a + 1;

step s2-active-transactions:
	-- Admin should be able to see all transactions
	SELECT count(*) FROM get_all_active_transactions() WHERE transaction_number != 0;
	SELECT count(*) FROM get_global_active_transactions() WHERE transaction_number != 0;

count
---------------------------------------------------------------------
    1
(1 row)

count
---------------------------------------------------------------------
    3
(1 row)

step s1-end:
    END;

step s2-end:
    END;

master_remove_node
---------------------------------------------------------------------

(1 row)

