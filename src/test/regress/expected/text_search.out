CREATE SCHEMA text_search;
CREATE SCHEMA text_search2;
SET search_path TO text_search;
-- create a new configruation from scratch
CREATE TEXT SEARCH CONFIGURATION my_text_search_config ( parser = default );
CREATE TABLE t1(id int, name text);
CREATE INDEX t1_search_name ON t1 USING gin (to_tsvector('text_search.my_text_search_config'::regconfig, (COALESCE(name, ''::character varying))::text));
SELECT create_distributed_table('t1', 'name');
 create_distributed_table
---------------------------------------------------------------------

(1 row)

DROP TABLE t1;
DROP TEXT SEARCH CONFIGURATION my_text_search_config;
-- try to create table and index in 1 transaction
BEGIN;
CREATE TEXT SEARCH CONFIGURATION my_text_search_config ( parser = default );
CREATE TABLE t1(id int, name text);
CREATE INDEX t1_search_name ON t1 USING gin (to_tsvector('text_search.my_text_search_config'::regconfig, (COALESCE(name, ''::character varying))::text));
SELECT create_distributed_table('t1', 'name');
 create_distributed_table
---------------------------------------------------------------------

(1 row)

ABORT;
-- try again, should not fail with my_text_search_config being retained on the worker
BEGIN;
CREATE TEXT SEARCH CONFIGURATION my_text_search_config ( parser = default );
COMMENT ON TEXT SEARCH CONFIGURATION my_text_search_config IS 'on demand propagation of text search object with a comment';
CREATE TABLE t1(id int, name text);
CREATE INDEX t1_search_name ON t1 USING gin (to_tsvector('text_search.my_text_search_config'::regconfig, (COALESCE(name, ''::character varying))::text));
SELECT create_distributed_table('t1', 'name');
 create_distributed_table
---------------------------------------------------------------------

(1 row)

SELECT run_command_on_workers($$
    SELECT obj_description('text_search.my_text_search_config'::regconfig);
$$);
                              run_command_on_workers
---------------------------------------------------------------------
 (localhost,57637,t,"on demand propagation of text search object with a comment")
 (localhost,57638,t,"on demand propagation of text search object with a comment")
(2 rows)

-- verify that changing anything on a managed TEXT SEARCH CONFIGURATION fails after parallel execution
COMMENT ON TEXT SEARCH CONFIGURATION my_text_search_config  IS 'this comment can''t be set right now';
ERROR:  cannot create or modify text search configuration because there was a parallel operation on a distributed table in the transaction
DETAIL:  When creating or altering a text search configuration, Citus needs to perform all operations over a single connection per node to ensure consistency.
HINT:  Try re-running the transaction with "SET LOCAL citus.multi_shard_modify_mode TO 'sequential';"
ABORT;
-- create an index on an already distributed table
BEGIN;
CREATE TEXT SEARCH CONFIGURATION my_text_search_config2 ( parser = default );
COMMENT ON TEXT SEARCH CONFIGURATION my_text_search_config2 IS 'on demand propagation of text search object with a comment 2';
CREATE TABLE t1(id int, name text);
SELECT create_distributed_table('t1', 'name');
 create_distributed_table
---------------------------------------------------------------------

(1 row)

CREATE INDEX t1_search_name ON t1 USING gin (to_tsvector('text_search.my_text_search_config2'::regconfig, (COALESCE(name, ''::character varying))::text));
SELECT run_command_on_workers($$
    SELECT obj_description('text_search.my_text_search_config2'::regconfig);
$$);
                               run_command_on_workers
---------------------------------------------------------------------
 (localhost,57637,t,"on demand propagation of text search object with a comment 2")
 (localhost,57638,t,"on demand propagation of text search object with a comment 2")
(2 rows)

ABORT;
-- should be able to create a configuration based on a copy of an existing configuration
CREATE TEXT SEARCH CONFIGURATION french_noaccent ( COPY = french );
CREATE TABLE t2(id int, name text);
CREATE INDEX t2_search_name ON t2 USING gin (to_tsvector('text_search.french_noaccent'::regconfig, (COALESCE(name, ''::character varying))::text));
SELECT create_distributed_table('t2', 'id');
 create_distributed_table
---------------------------------------------------------------------

(1 row)

-- spot check that french_noaccent copied settings from french
SELECT run_command_on_workers($$
    SELECT ROW(alias,dictionary) FROM ts_debug('text_search.french_noaccent', 'comment tu t''appelle') WHERE alias = 'asciiword' LIMIT 1;
$$);
            run_command_on_workers
---------------------------------------------------------------------
 (localhost,57637,t,"(asciiword,french_stem)")
 (localhost,57638,t,"(asciiword,french_stem)")
(2 rows)

-- makes no sense, however we expect that the dictionary for the first token changes accordingly
ALTER TEXT SEARCH CONFIGURATION french_noaccent ALTER MAPPING FOR asciiword WITH dutch_stem;
SELECT run_command_on_workers($$
    SELECT ROW(alias,dictionary) FROM ts_debug('text_search.french_noaccent', 'comment tu t''appelle') WHERE alias = 'asciiword' LIMIT 1;
$$);
            run_command_on_workers
---------------------------------------------------------------------
 (localhost,57637,t,"(asciiword,dutch_stem)")
 (localhost,57638,t,"(asciiword,dutch_stem)")
(2 rows)

-- do the same but we will replace all french dictionaries
SELECT run_command_on_workers($$
    SELECT ROW(alias,dictionary) FROM ts_debug('text_search.french_noaccent', 'un chou-fleur') WHERE alias = 'asciihword' LIMIT 1;
$$);
             run_command_on_workers
---------------------------------------------------------------------
 (localhost,57637,t,"(asciihword,french_stem)")
 (localhost,57638,t,"(asciihword,french_stem)")
(2 rows)

ALTER TEXT SEARCH CONFIGURATION french_noaccent ALTER MAPPING REPLACE french_stem WITH dutch_stem;
SELECT run_command_on_workers($$
    SELECT ROW(alias,dictionary) FROM ts_debug('text_search.french_noaccent', 'un chou-fleur') WHERE alias = 'asciihword' LIMIT 1;
$$);
            run_command_on_workers
---------------------------------------------------------------------
 (localhost,57637,t,"(asciihword,dutch_stem)")
 (localhost,57638,t,"(asciihword,dutch_stem)")
(2 rows)

-- once more but now back via yet a different DDL command
ALTER TEXT SEARCH CONFIGURATION french_noaccent ALTER MAPPING FOR asciihword REPLACE dutch_stem WITH french_stem;
SELECT run_command_on_workers($$
    SELECT ROW(alias,dictionary) FROM ts_debug('text_search.french_noaccent', 'un chou-fleur') WHERE alias = 'asciihword' LIMIT 1;
$$);
             run_command_on_workers
---------------------------------------------------------------------
 (localhost,57637,t,"(asciihword,french_stem)")
 (localhost,57638,t,"(asciihword,french_stem)")
(2 rows)

-- drop a mapping
ALTER TEXT SEARCH CONFIGURATION french_noaccent DROP MAPPING FOR asciihword;
SELECT run_command_on_workers($$
    SELECT ROW(alias,dictionary) FROM ts_debug('text_search.french_noaccent', 'un chou-fleur') WHERE alias = 'asciihword' LIMIT 1;
$$);
       run_command_on_workers
---------------------------------------------------------------------
 (localhost,57637,t,"(asciihword,)")
 (localhost,57638,t,"(asciihword,)")
(2 rows)

-- also with exists, doesn't change anything, but should not error
ALTER TEXT SEARCH CONFIGURATION french_noaccent DROP MAPPING IF EXISTS FOR asciihword;
NOTICE:  mapping for token type "asciihword" does not exist, skipping
-- Comment on a text search configuration
COMMENT ON TEXT SEARCH CONFIGURATION french_noaccent IS 'a text configuration that is butcherd to test all edge cases';
SELECT run_command_on_workers($$
    SELECT obj_description('text_search.french_noaccent'::regconfig);
$$);
                               run_command_on_workers
---------------------------------------------------------------------
 (localhost,57637,t,"a text configuration that is butcherd to test all edge cases")
 (localhost,57638,t,"a text configuration that is butcherd to test all edge cases")
(2 rows)

-- Remove a comment
COMMENT ON TEXT SEARCH CONFIGURATION french_noaccent IS NULL;
SELECT run_command_on_workers($$
    SELECT obj_description('text_search.french_noaccent'::regconfig);
$$);
 run_command_on_workers
---------------------------------------------------------------------
 (localhost,57637,t,"")
 (localhost,57638,t,"")
(2 rows)

-- verify adding 2 dictionaries for two tokes at once
ALTER TEXT SEARCH CONFIGURATION french_noaccent DROP MAPPING IF EXISTS FOR asciiword, asciihword;
NOTICE:  mapping for token type "asciihword" does not exist, skipping
ALTER TEXT SEARCH CONFIGURATION french_noaccent ADD MAPPING FOR asciiword, asciihword WITH french_stem, dutch_stem;
SELECT run_command_on_workers($$
    SELECT ROW(alias,dictionaries) FROM ts_debug('text_search.french_noaccent', 'un chou-fleur') WHERE alias = 'asciiword' LIMIT 1;
$$);
                     run_command_on_workers
---------------------------------------------------------------------
 (localhost,57637,t,"(asciiword,""{french_stem,dutch_stem}"")")
 (localhost,57638,t,"(asciiword,""{french_stem,dutch_stem}"")")
(2 rows)

SELECT run_command_on_workers($$
    SELECT ROW(alias,dictionaries) FROM ts_debug('text_search.french_noaccent', 'un chou-fleur') WHERE alias = 'asciihword' LIMIT 1;
$$);
                     run_command_on_workers
---------------------------------------------------------------------
 (localhost,57637,t,"(asciihword,""{french_stem,dutch_stem}"")")
 (localhost,57638,t,"(asciihword,""{french_stem,dutch_stem}"")")
(2 rows)

--verify we can drop cascade a configuration that is in use
-- verify it is in use
DROP TEXT SEARCH CONFIGURATION text_search.french_noaccent;
ERROR:  cannot drop text search configuration french_noaccent because other objects depend on it
DETAIL:  index t2_search_name depends on text search configuration french_noaccent
HINT:  Use DROP ... CASCADE to drop the dependent objects too.
-- drop cascade
DROP TEXT SEARCH CONFIGURATION text_search.french_noaccent CASCADE;
NOTICE:  drop cascades to index t2_search_name
-- verify the configuration is dropped from the workers
SELECT run_command_on_workers($$ SELECT 'text_search.french_noaccent'::regconfig; $$);
                                         run_command_on_workers
---------------------------------------------------------------------
 (localhost,57637,f,"ERROR:  text search configuration ""text_search.french_noaccent"" does not exist")
 (localhost,57638,f,"ERROR:  text search configuration ""text_search.french_noaccent"" does not exist")
(2 rows)

SET client_min_messages TO 'warning';
SELECT run_command_on_workers($$CREATE ROLE text_search_owner;$$);
      run_command_on_workers
---------------------------------------------------------------------
 (localhost,57637,t,"CREATE ROLE")
 (localhost,57638,t,"CREATE ROLE")
(2 rows)

CREATE ROLE text_search_owner;
RESET client_min_messages;
CREATE TEXT SEARCH CONFIGURATION changed_owner ( PARSER = default );
SELECT run_command_on_workers($$
    SELECT cfgowner::regrole
      FROM pg_ts_config
     WHERE oid = 'text_search.changed_owner'::regconfig;
$$);
    run_command_on_workers
---------------------------------------------------------------------
 (localhost,57637,t,postgres)
 (localhost,57638,t,postgres)
(2 rows)

ALTER TEXT SEARCH CONFIGURATION changed_owner OWNER TO text_search_owner;
SELECT run_command_on_workers($$
    SELECT cfgowner::regrole
      FROM pg_ts_config
     WHERE oid = 'text_search.changed_owner'::regconfig;
$$);
        run_command_on_workers
---------------------------------------------------------------------
 (localhost,57637,t,text_search_owner)
 (localhost,57638,t,text_search_owner)
(2 rows)

-- rename tests
CREATE TEXT SEARCH CONFIGURATION change_name ( PARSER = default );
SELECT run_command_on_workers($$ -- verify the name exists on the worker
    SELECT 'text_search.change_name'::regconfig;
$$);
           run_command_on_workers
---------------------------------------------------------------------
 (localhost,57637,t,text_search.change_name)
 (localhost,57638,t,text_search.change_name)
(2 rows)

ALTER TEXT SEARCH CONFIGURATION change_name RENAME TO changed_name;
SELECT run_command_on_workers($$ -- verify the name exists on the worker
    SELECT 'text_search.changed_name'::regconfig;
$$);
            run_command_on_workers
---------------------------------------------------------------------
 (localhost,57637,t,text_search.changed_name)
 (localhost,57638,t,text_search.changed_name)
(2 rows)

-- test move of schema
CREATE TEXT SEARCH CONFIGURATION change_schema ( PARSER = default );
SELECT run_command_on_workers($$ -- verify the name exists on the worker
    SELECT 'text_search.change_schema'::regconfig;
$$);
            run_command_on_workers
---------------------------------------------------------------------
 (localhost,57637,t,text_search.change_schema)
 (localhost,57638,t,text_search.change_schema)
(2 rows)

ALTER TEXT SEARCH CONFIGURATION change_schema SET SCHEMA text_search2;
SELECT run_command_on_workers($$ -- verify the name exists on the worker
    SELECT 'text_search2.change_schema'::regconfig;
$$);
             run_command_on_workers
---------------------------------------------------------------------
 (localhost,57637,t,text_search2.change_schema)
 (localhost,57638,t,text_search2.change_schema)
(2 rows)

-- verify edgecases in deparsers
CREATE TEXT SEARCH CONFIGURATION config1 ( PARSER = default );
CREATE TEXT SEARCH CONFIGURATION config2 ( PARSER = default );
SET citus.enable_ddl_propagation TO off;
CREATE TEXT SEARCH CONFIGURATION config3 ( PARSER = default );
RESET citus.enable_ddl_propagation;
-- verify config1, config2 exist on workers, config3 not
SELECT run_command_on_workers($$ SELECT 'text_search.config1'::regconfig; $$);
         run_command_on_workers
---------------------------------------------------------------------
 (localhost,57637,t,text_search.config1)
 (localhost,57638,t,text_search.config1)
(2 rows)

SELECT run_command_on_workers($$ SELECT 'text_search.config2'::regconfig; $$);
         run_command_on_workers
---------------------------------------------------------------------
 (localhost,57637,t,text_search.config2)
 (localhost,57638,t,text_search.config2)
(2 rows)

SELECT run_command_on_workers($$ SELECT 'text_search.config3'::regconfig; $$);
                                     run_command_on_workers
---------------------------------------------------------------------
 (localhost,57637,f,"ERROR:  text search configuration ""text_search.config3"" does not exist")
 (localhost,57638,f,"ERROR:  text search configuration ""text_search.config3"" does not exist")
(2 rows)

-- DROP all config's, only 1&2 are distributed, they should propagate well to remotes
DROP TEXT SEARCH CONFIGURATION config1, config2, config3;
-- verify all existing ones have been removed (checking config3 for consistency)
SELECT run_command_on_workers($$ SELECT 'text_search.config1'::regconfig; $$);
                                     run_command_on_workers
---------------------------------------------------------------------
 (localhost,57637,f,"ERROR:  text search configuration ""text_search.config1"" does not exist")
 (localhost,57638,f,"ERROR:  text search configuration ""text_search.config1"" does not exist")
(2 rows)

SELECT run_command_on_workers($$ SELECT 'text_search.config2'::regconfig; $$);
                                     run_command_on_workers
---------------------------------------------------------------------
 (localhost,57637,f,"ERROR:  text search configuration ""text_search.config2"" does not exist")
 (localhost,57638,f,"ERROR:  text search configuration ""text_search.config2"" does not exist")
(2 rows)

SELECT run_command_on_workers($$ SELECT 'text_search.config3'::regconfig; $$);
                                     run_command_on_workers
---------------------------------------------------------------------
 (localhost,57637,f,"ERROR:  text search configuration ""text_search.config3"" does not exist")
 (localhost,57638,f,"ERROR:  text search configuration ""text_search.config3"" does not exist")
(2 rows)

-- verify they are all removed locally
SELECT 'text_search.config1'::regconfig;
ERROR:  text search configuration "text_search.config1" does not exist
SELECT 'text_search.config2'::regconfig;
ERROR:  text search configuration "text_search.config2" does not exist
SELECT 'text_search.config3'::regconfig;
ERROR:  text search configuration "text_search.config3" does not exist
SET client_min_messages TO 'warning';
DROP SCHEMA text_search, text_search2 CASCADE;
DROP ROLE text_search_owner;
