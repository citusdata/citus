CREATE SCHEMA generated_identities;
SET search_path TO generated_identities;
SET client_min_messages to ERROR;
SELECT 1 from citus_add_node('localhost', :master_port, groupId=>0);
 ?column?
---------------------------------------------------------------------
        1
(1 row)

DROP TABLE IF EXISTS generated_identities_test;
-- create a partitioned table for testing.
CREATE TABLE generated_identities_test (
    a int CONSTRAINT myconname GENERATED BY DEFAULT AS IDENTITY,
    b bigint GENERATED ALWAYS AS IDENTITY (START WITH 10 INCREMENT BY 10),
    c smallint GENERATED BY DEFAULT AS IDENTITY,
    d serial,
    e bigserial,
    f smallserial,
    g int
)
PARTITION BY RANGE (a);
CREATE TABLE generated_identities_test_1_5 PARTITION OF generated_identities_test FOR VALUES FROM (1) TO (5);
CREATE TABLE generated_identities_test_5_50 PARTITION OF generated_identities_test FOR VALUES FROM (5) TO (50);
-- local tables
SELECT citus_add_local_table_to_metadata('generated_identities_test');
 citus_add_local_table_to_metadata
---------------------------------------------------------------------

(1 row)

\d generated_identities_test
               Partitioned table "generated_identities.generated_identities_test"
 Column |   Type   | Collation | Nullable |                       Default
---------------------------------------------------------------------
 a      | integer  |           | not null | generated by default as identity
 b      | bigint   |           | not null | generated always as identity
 c      | smallint |           | not null | generated by default as identity
 d      | integer  |           | not null | nextval('generated_identities_test_d_seq'::regclass)
 e      | bigint   |           | not null | nextval('generated_identities_test_e_seq'::regclass)
 f      | smallint |           | not null | nextval('generated_identities_test_f_seq'::regclass)
 g      | integer  |           |          |
Partition key: RANGE (a)
Number of partitions: 2 (Use \d+ to list them.)

\c - - - :worker_1_port
\d generated_identities.generated_identities_test
                             Partitioned table "generated_identities.generated_identities_test"
 Column |   Type   | Collation | Nullable |                                     Default
---------------------------------------------------------------------
 a      | integer  |           | not null | worker_nextval('generated_identities.generated_identities_test_a_seq'::regclass)
 b      | bigint   |           | not null | nextval('generated_identities.generated_identities_test_b_seq'::regclass)
 c      | smallint |           | not null | worker_nextval('generated_identities.generated_identities_test_c_seq'::regclass)
 d      | integer  |           | not null | worker_nextval('generated_identities.generated_identities_test_d_seq'::regclass)
 e      | bigint   |           | not null | nextval('generated_identities.generated_identities_test_e_seq'::regclass)
 f      | smallint |           | not null | worker_nextval('generated_identities.generated_identities_test_f_seq'::regclass)
 g      | integer  |           |          |
Partition key: RANGE (a)
Number of partitions: 2 (Use \d+ to list them.)

\c - - - :master_port
SET search_path TO generated_identities;
SET client_min_messages to ERROR;
SELECT undistribute_table('generated_identities_test');
 undistribute_table
---------------------------------------------------------------------

(1 row)

SELECT citus_remove_node('localhost', :master_port);
 citus_remove_node
---------------------------------------------------------------------

(1 row)

SELECT create_distributed_table('generated_identities_test', 'a');
 create_distributed_table
---------------------------------------------------------------------

(1 row)

\d generated_identities_test
               Partitioned table "generated_identities.generated_identities_test"
 Column |   Type   | Collation | Nullable |                       Default
---------------------------------------------------------------------
 a      | integer  |           | not null | generated by default as identity
 b      | bigint   |           | not null | generated always as identity
 c      | smallint |           | not null | generated by default as identity
 d      | integer  |           | not null | nextval('generated_identities_test_d_seq'::regclass)
 e      | bigint   |           | not null | nextval('generated_identities_test_e_seq'::regclass)
 f      | smallint |           | not null | nextval('generated_identities_test_f_seq'::regclass)
 g      | integer  |           |          |
Partition key: RANGE (a)
Number of partitions: 2 (Use \d+ to list them.)

\c - - - :worker_1_port
\d generated_identities.generated_identities_test
                             Partitioned table "generated_identities.generated_identities_test"
 Column |   Type   | Collation | Nullable |                                     Default
---------------------------------------------------------------------
 a      | integer  |           | not null | worker_nextval('generated_identities.generated_identities_test_a_seq'::regclass)
 b      | bigint   |           | not null | nextval('generated_identities.generated_identities_test_b_seq'::regclass)
 c      | smallint |           | not null | worker_nextval('generated_identities.generated_identities_test_c_seq'::regclass)
 d      | integer  |           | not null | worker_nextval('generated_identities.generated_identities_test_d_seq'::regclass)
 e      | bigint   |           | not null | nextval('generated_identities.generated_identities_test_e_seq'::regclass)
 f      | smallint |           | not null | worker_nextval('generated_identities.generated_identities_test_f_seq'::regclass)
 g      | integer  |           |          |
Partition key: RANGE (a)
Number of partitions: 2 (Use \d+ to list them.)

\c - - - :master_port
SET search_path TO generated_identities;
SET client_min_messages to ERROR;
insert into generated_identities_test (g) values (1);
insert into generated_identities_test (g) SELECT 2;
INSERT INTO generated_identities_test (g)
SELECT s FROM generate_series(3,7) s;
SELECT * FROM generated_identities_test ORDER BY 1;
 a | b  | c | d | e | f | g
---------------------------------------------------------------------
 1 | 10 | 1 | 1 | 1 | 1 | 1
 2 | 20 | 2 | 2 | 2 | 2 | 2
 3 | 30 | 3 | 3 | 3 | 3 | 3
 4 | 40 | 4 | 4 | 4 | 4 | 4
 5 | 50 | 5 | 5 | 5 | 5 | 5
 6 | 60 | 6 | 6 | 6 | 6 | 6
 7 | 70 | 7 | 7 | 7 | 7 | 7
(7 rows)

SELECT undistribute_table('generated_identities_test');
 undistribute_table
---------------------------------------------------------------------

(1 row)

SELECT * FROM generated_identities_test ORDER BY 1;
 a | b  | c | d | e | f | g
---------------------------------------------------------------------
 1 | 10 | 1 | 1 | 1 | 1 | 1
 2 | 20 | 2 | 2 | 2 | 2 | 2
 3 | 30 | 3 | 3 | 3 | 3 | 3
 4 | 40 | 4 | 4 | 4 | 4 | 4
 5 | 50 | 5 | 5 | 5 | 5 | 5
 6 | 60 | 6 | 6 | 6 | 6 | 6
 7 | 70 | 7 | 7 | 7 | 7 | 7
(7 rows)

\d generated_identities_test
               Partitioned table "generated_identities.generated_identities_test"
 Column |   Type   | Collation | Nullable |                       Default
---------------------------------------------------------------------
 a      | integer  |           | not null | generated by default as identity
 b      | bigint   |           | not null | generated always as identity
 c      | smallint |           | not null | generated by default as identity
 d      | integer  |           | not null | nextval('generated_identities_test_d_seq'::regclass)
 e      | bigint   |           | not null | nextval('generated_identities_test_e_seq'::regclass)
 f      | smallint |           | not null | nextval('generated_identities_test_f_seq'::regclass)
 g      | integer  |           |          |
Partition key: RANGE (a)
Number of partitions: 2 (Use \d+ to list them.)

\c - - - :worker_1_port
\d generated_identities.generated_identities_test
\c - - - :master_port
SET search_path TO generated_identities;
SET client_min_messages to ERROR;
INSERT INTO generated_identities_test (g)
SELECT s FROM generate_series(8,10) s;
SELECT * FROM generated_identities_test ORDER BY 1;
 a  |  b  | c  | d  | e  | f  | g
---------------------------------------------------------------------
  1 |  10 |  1 |  1 |  1 |  1 |  1
  2 |  20 |  2 |  2 |  2 |  2 |  2
  3 |  30 |  3 |  3 |  3 |  3 |  3
  4 |  40 |  4 |  4 |  4 |  4 |  4
  5 |  50 |  5 |  5 |  5 |  5 |  5
  6 |  60 |  6 |  6 |  6 |  6 |  6
  7 |  70 |  7 |  7 |  7 |  7 |  7
  8 |  80 |  8 |  8 |  8 |  8 |  8
  9 |  90 |  9 |  9 |  9 |  9 |  9
 10 | 100 | 10 | 10 | 10 | 10 | 10
(10 rows)

-- distributed table
SELECT create_distributed_table('generated_identities_test', 'a');
 create_distributed_table
---------------------------------------------------------------------

(1 row)

-- alter table .. alter column .. add is unsupported
ALTER TABLE generated_identities_test ALTER COLUMN g ADD GENERATED ALWAYS AS IDENTITY;
ERROR:  alter table command is currently unsupported
DETAIL:  Only ADD|DROP COLUMN, SET|DROP NOT NULL, SET|DROP DEFAULT, ADD|DROP|VALIDATE CONSTRAINT, SET (), RESET (), ENABLE|DISABLE|NO FORCE|FORCE ROW LEVEL SECURITY, ATTACH|DETACH PARTITION and TYPE subcommands are supported.
-- alter table .. alter column is unsupported
ALTER TABLE generated_identities_test ALTER COLUMN b TYPE int;
ERROR:  cannot execute ALTER COLUMN command involving identity column
SELECT alter_distributed_table('generated_identities_test', 'g');
 alter_distributed_table
---------------------------------------------------------------------

(1 row)

SELECT alter_distributed_table('generated_identities_test', 'b');
 alter_distributed_table
---------------------------------------------------------------------

(1 row)

SELECT alter_distributed_table('generated_identities_test', 'c');
 alter_distributed_table
---------------------------------------------------------------------

(1 row)

SELECT undistribute_table('generated_identities_test');
 undistribute_table
---------------------------------------------------------------------

(1 row)

SELECT * FROM generated_identities_test ORDER BY g;
 a  |  b  | c  | d  | e  | f  | g
---------------------------------------------------------------------
  1 |  10 |  1 |  1 |  1 |  1 |  1
  2 |  20 |  2 |  2 |  2 |  2 |  2
  3 |  30 |  3 |  3 |  3 |  3 |  3
  4 |  40 |  4 |  4 |  4 |  4 |  4
  5 |  50 |  5 |  5 |  5 |  5 |  5
  6 |  60 |  6 |  6 |  6 |  6 |  6
  7 |  70 |  7 |  7 |  7 |  7 |  7
  8 |  80 |  8 |  8 |  8 |  8 |  8
  9 |  90 |  9 |  9 |  9 |  9 |  9
 10 | 100 | 10 | 10 | 10 | 10 | 10
(10 rows)

-- reference table
DROP TABLE generated_identities_test;
CREATE TABLE generated_identities_test (
    a int GENERATED BY DEFAULT AS IDENTITY,
    b bigint GENERATED ALWAYS AS IDENTITY (START WITH 10 INCREMENT BY 10),
    c smallint GENERATED BY DEFAULT AS IDENTITY,
    d serial,
    e bigserial,
    f smallserial,
    g int
);
SELECT create_reference_table('generated_identities_test');
 create_reference_table
---------------------------------------------------------------------

(1 row)

\d generated_identities_test
                     Table "generated_identities.generated_identities_test"
 Column |   Type   | Collation | Nullable |                       Default
---------------------------------------------------------------------
 a      | integer  |           | not null | generated by default as identity
 b      | bigint   |           | not null | generated always as identity
 c      | smallint |           | not null | generated by default as identity
 d      | integer  |           | not null | nextval('generated_identities_test_d_seq'::regclass)
 e      | bigint   |           | not null | nextval('generated_identities_test_e_seq'::regclass)
 f      | smallint |           | not null | nextval('generated_identities_test_f_seq'::regclass)
 g      | integer  |           |          |

\c - - - :worker_1_port
\d generated_identities.generated_identities_test
                                   Table "generated_identities.generated_identities_test"
 Column |   Type   | Collation | Nullable |                                     Default
---------------------------------------------------------------------
 a      | integer  |           | not null | worker_nextval('generated_identities.generated_identities_test_a_seq'::regclass)
 b      | bigint   |           | not null | nextval('generated_identities.generated_identities_test_b_seq'::regclass)
 c      | smallint |           | not null | worker_nextval('generated_identities.generated_identities_test_c_seq'::regclass)
 d      | integer  |           | not null | worker_nextval('generated_identities.generated_identities_test_d_seq'::regclass)
 e      | bigint   |           | not null | nextval('generated_identities.generated_identities_test_e_seq'::regclass)
 f      | smallint |           | not null | worker_nextval('generated_identities.generated_identities_test_f_seq'::regclass)
 g      | integer  |           |          |

\c - - - :master_port
SET search_path TO generated_identities;
SET client_min_messages to ERROR;
INSERT INTO generated_identities_test (g)
SELECT s FROM generate_series(11,20) s;
SELECT * FROM generated_identities_test ORDER BY g;
 a  |  b  | c  | d  | e  | f  | g
---------------------------------------------------------------------
  1 |  10 |  1 |  1 |  1 |  1 | 11
  2 |  20 |  2 |  2 |  2 |  2 | 12
  3 |  30 |  3 |  3 |  3 |  3 | 13
  4 |  40 |  4 |  4 |  4 |  4 | 14
  5 |  50 |  5 |  5 |  5 |  5 | 15
  6 |  60 |  6 |  6 |  6 |  6 | 16
  7 |  70 |  7 |  7 |  7 |  7 | 17
  8 |  80 |  8 |  8 |  8 |  8 | 18
  9 |  90 |  9 |  9 |  9 |  9 | 19
 10 | 100 | 10 | 10 | 10 | 10 | 20
(10 rows)

SELECT undistribute_table('generated_identities_test');
 undistribute_table
---------------------------------------------------------------------

(1 row)

\d generated_identities_test
                     Table "generated_identities.generated_identities_test"
 Column |   Type   | Collation | Nullable |                       Default
---------------------------------------------------------------------
 a      | integer  |           | not null | generated by default as identity
 b      | bigint   |           | not null | generated always as identity
 c      | smallint |           | not null | generated by default as identity
 d      | integer  |           | not null | nextval('generated_identities_test_d_seq'::regclass)
 e      | bigint   |           | not null | nextval('generated_identities_test_e_seq'::regclass)
 f      | smallint |           | not null | nextval('generated_identities_test_f_seq'::regclass)
 g      | integer  |           |          |

\c - - - :worker_1_port
\d generated_identities.generated_identities_test
\c - - - :master_port
SET search_path TO generated_identities;
SET client_min_messages to ERROR;
-- alter table .. add column .. GENERATED .. AS IDENTITY
DROP TABLE IF EXISTS color;
CREATE TABLE color (
    color_name VARCHAR NOT NULL
);
SELECT create_distributed_table('color', 'color_name');
 create_distributed_table
---------------------------------------------------------------------

(1 row)

ALTER TABLE color ADD COLUMN color_id BIGINT GENERATED ALWAYS AS IDENTITY;
INSERT INTO color(color_name) VALUES ('Red');
ALTER TABLE color ADD COLUMN color_id_1 BIGINT GENERATED ALWAYS AS IDENTITY;
ERROR:  Cannot add an identity column because the table is not empty
DROP TABLE color;
-- insert data from workers
CREATE TABLE color (
    color_id BIGINT GENERATED ALWAYS AS IDENTITY UNIQUE,
    color_name VARCHAR NOT NULL
);
SELECT create_distributed_table('color', 'color_id');
 create_distributed_table
---------------------------------------------------------------------

(1 row)

\c - - - :worker_1_port
SET search_path TO generated_identities;
SET client_min_messages to ERROR;
INSERT INTO color(color_name) VALUES ('Red');
\c - - - :master_port
SET search_path TO generated_identities;
SET client_min_messages to ERROR;
SELECT undistribute_table('color');
 undistribute_table
---------------------------------------------------------------------

(1 row)

SELECT create_distributed_table('color', 'color_id');
 create_distributed_table
---------------------------------------------------------------------

(1 row)

\c - - - :worker_1_port
SET search_path TO generated_identities;
SET client_min_messages to ERROR;
INSERT INTO color(color_name) VALUES ('Red');
\c - - - :master_port
SET search_path TO generated_identities;
SET client_min_messages to ERROR;
INSERT INTO color(color_name) VALUES ('Red');
SELECT count(*) from color;
 count
---------------------------------------------------------------------
     3
(1 row)

-- modify sequence & alter table
DROP TABLE color;
CREATE TABLE color (
    color_id BIGINT GENERATED ALWAYS AS IDENTITY UNIQUE,
    color_name VARCHAR NOT NULL
);
SELECT create_distributed_table('color', 'color_id');
 create_distributed_table
---------------------------------------------------------------------

(1 row)

\c - - - :worker_1_port
SET search_path TO generated_identities;
SET client_min_messages to ERROR;
INSERT INTO color(color_name) VALUES ('Red');
\c - - - :master_port
SET search_path TO generated_identities;
SET client_min_messages to ERROR;
SELECT undistribute_table('color');
 undistribute_table
---------------------------------------------------------------------

(1 row)

ALTER SEQUENCE color_color_id_seq RENAME TO myseq;
SELECT create_distributed_table('color', 'color_id');
 create_distributed_table
---------------------------------------------------------------------

(1 row)

\ds+ myseq
                                      List of relations
        Schema        | Name  |   Type   |  Owner   | Persistence |    Size    | Description
---------------------------------------------------------------------
 generated_identities | myseq | sequence | postgres | permanent   | 8192 bytes |
(1 row)

\ds+ color_color_id_seq
                        List of relations
 Schema | Name | Type | Owner | Persistence | Size | Description
---------------------------------------------------------------------
(0 rows)

\d color
                          Table "generated_identities.color"
   Column   |       Type        | Collation | Nullable |           Default
---------------------------------------------------------------------
 color_id   | bigint            |           | not null | generated always as identity
 color_name | character varying |           | not null |
Indexes:
    "color_color_id_key" UNIQUE CONSTRAINT, btree (color_id)

\c - - - :worker_1_port
SET search_path TO generated_identities;
SET client_min_messages to ERROR;
\ds+ myseq
                                      List of relations
        Schema        | Name  |   Type   |  Owner   | Persistence |    Size    | Description
---------------------------------------------------------------------
 generated_identities | myseq | sequence | postgres | permanent   | 8192 bytes |
(1 row)

\ds+ color_color_id_seq
                        List of relations
 Schema | Name | Type | Owner | Persistence | Size | Description
---------------------------------------------------------------------
(0 rows)

\d color
                         Table "generated_identities.color"
   Column   |       Type        | Collation | Nullable |          Default
---------------------------------------------------------------------
 color_id   | bigint            |           | not null | nextval('myseq'::regclass)
 color_name | character varying |           | not null |
Indexes:
    "color_color_id_key" UNIQUE CONSTRAINT, btree (color_id)

INSERT INTO color(color_name) VALUES ('Red');
\c - - - :master_port
SET search_path TO generated_identities;
SET client_min_messages to ERROR;
ALTER SEQUENCE myseq RENAME TO color_color_id_seq;
\ds+ myseq
                        List of relations
 Schema | Name | Type | Owner | Persistence | Size | Description
---------------------------------------------------------------------
(0 rows)

\ds+ color_color_id_seq
                                            List of relations
        Schema        |        Name        |   Type   |  Owner   | Persistence |    Size    | Description
---------------------------------------------------------------------
 generated_identities | color_color_id_seq | sequence | postgres | permanent   | 8192 bytes |
(1 row)

INSERT INTO color(color_name) VALUES ('Red');
\c - - - :worker_1_port
SET search_path TO generated_identities;
SET client_min_messages to ERROR;
\ds+ myseq
                        List of relations
 Schema | Name | Type | Owner | Persistence | Size | Description
---------------------------------------------------------------------
(0 rows)

\ds+ color_color_id_seq
                                            List of relations
        Schema        |        Name        |   Type   |  Owner   | Persistence |    Size    | Description
---------------------------------------------------------------------
 generated_identities | color_color_id_seq | sequence | postgres | permanent   | 8192 bytes |
(1 row)

\d color
                               Table "generated_identities.color"
   Column   |       Type        | Collation | Nullable |                 Default
---------------------------------------------------------------------
 color_id   | bigint            |           | not null | nextval('color_color_id_seq'::regclass)
 color_name | character varying |           | not null |
Indexes:
    "color_color_id_key" UNIQUE CONSTRAINT, btree (color_id)

INSERT INTO color(color_name) VALUES ('Red');
\c - - - :master_port
SET search_path TO generated_identities;
SET client_min_messages to ERROR;
SELECT alter_distributed_table('co23423lor', shard_count := 6);
ERROR:  relation "co23423lor" does not exist
INSERT INTO color(color_name) VALUES ('Red');
\c - - - :worker_1_port
SET search_path TO generated_identities;
SET client_min_messages to ERROR;
\ds+ color_color_id_seq
                                            List of relations
        Schema        |        Name        |   Type   |  Owner   | Persistence |    Size    | Description
---------------------------------------------------------------------
 generated_identities | color_color_id_seq | sequence | postgres | permanent   | 8192 bytes |
(1 row)

INSERT INTO color(color_name) VALUES ('Red');
\c - - - :master_port
SET search_path TO generated_identities;
SET client_min_messages to ERROR;
DROP SCHEMA generated_identities CASCADE;
