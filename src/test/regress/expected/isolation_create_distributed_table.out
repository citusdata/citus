Parsed test spec with 2 sessions

starting permutation: s1-begin s2-begin s1-create_distributed_table s2-create_distributed_table s1-commit s2-commit
step s1-begin:
    BEGIN;

step s2-begin:
 BEGIN;

step s1-create_distributed_table:
 SELECT create_distributed_table('table_to_distribute', 'id');

create_distributed_table
---------------------------------------------------------------------

(1 row)

step s2-create_distributed_table:
 SELECT create_distributed_table('table_to_distribute', 'id');
 <waiting ...>
step s1-commit: 
    COMMIT;

step s2-create_distributed_table: <... completed>
ERROR:  table "table_to_distribute" is already distributed
step s2-commit:
 COMMIT;


starting permutation: s1-begin s2-begin s1-create_distributed_table s2-copy_to_local_table s1-commit s2-commit
step s1-begin:
    BEGIN;

step s2-begin:
 BEGIN;

step s1-create_distributed_table:
 SELECT create_distributed_table('table_to_distribute', 'id');

create_distributed_table
---------------------------------------------------------------------

(1 row)

step s2-copy_to_local_table:
 COPY table_to_distribute FROM PROGRAM 'echo 0 && echo 1 && echo 2 && echo 3 && echo 4 && echo 5 && echo 6 && echo 7 && echo 8';
 <waiting ...>
step s1-commit: 
    COMMIT;

step s2-copy_to_local_table: <... completed>
step s2-commit:
 COMMIT;


starting permutation: s1-begin s2-begin s2-copy_to_local_table s1-create_distributed_table s2-commit s1-commit
step s1-begin:
    BEGIN;

step s2-begin:
 BEGIN;

step s2-copy_to_local_table:
 COPY table_to_distribute FROM PROGRAM 'echo 0 && echo 1 && echo 2 && echo 3 && echo 4 && echo 5 && echo 6 && echo 7 && echo 8';

step s1-create_distributed_table:
 SELECT create_distributed_table('table_to_distribute', 'id');
 <waiting ...>
step s2-commit: 
 COMMIT;

step s1-create_distributed_table: <... completed>
create_distributed_table
---------------------------------------------------------------------

(1 row)

step s1-commit:
    COMMIT;


starting permutation: s1-copy_to_local_table s1-begin s2-begin s1-create_distributed_table s2-create_distributed_table s1-commit s2-commit
step s1-copy_to_local_table:
 COPY table_to_distribute FROM PROGRAM 'echo 0 && echo 1 && echo 2 && echo 3 && echo 4 && echo 5 && echo 6 && echo 7 && echo 8';

step s1-begin:
    BEGIN;

step s2-begin:
 BEGIN;

step s1-create_distributed_table:
 SELECT create_distributed_table('table_to_distribute', 'id');

create_distributed_table
---------------------------------------------------------------------

(1 row)

step s2-create_distributed_table:
 SELECT create_distributed_table('table_to_distribute', 'id');
 <waiting ...>
step s1-commit: 
    COMMIT;

step s2-create_distributed_table: <... completed>
ERROR:  table "table_to_distribute" is already distributed
step s2-commit:
 COMMIT;


starting permutation: s1-create_distributed_table s1-begin s2-begin s1_set-shard-property s2-create_distributed_table_colocated s1-rollback s2-commit
step s1-create_distributed_table:
 SELECT create_distributed_table('table_to_distribute', 'id');

create_distributed_table
---------------------------------------------------------------------

(1 row)

step s1-begin:
    BEGIN;

step s2-begin:
 BEGIN;

step s1_set-shard-property:
 SELECT citus_shard_property_set(shardid, anti_affinity=>'true')
    FROM pg_dist_shard WHERE logicalrelid = 'table_to_distribute'::regclass
    ORDER BY shardid LIMIT 1;

citus_shard_property_set
---------------------------------------------------------------------

(1 row)

step s2-create_distributed_table_colocated:
 SELECT create_distributed_table('table_to_colocate', 'id', colocate_with=>'table_to_distribute');

ERROR:  could not acquire the lock required to colocate distributed table public.table_to_distribute
step s1-rollback:
    ROLLBACK;

step s2-commit:
 COMMIT;


starting permutation: s1-create_distributed_table s1-begin s2-begin s2-create_distributed_table_colocated s1_set-shard-property s1-rollback s2-commit
step s1-create_distributed_table:
 SELECT create_distributed_table('table_to_distribute', 'id');

create_distributed_table
---------------------------------------------------------------------

(1 row)

step s1-begin:
    BEGIN;

step s2-begin:
 BEGIN;

step s2-create_distributed_table_colocated:
 SELECT create_distributed_table('table_to_colocate', 'id', colocate_with=>'table_to_distribute');

create_distributed_table
---------------------------------------------------------------------

(1 row)

step s1_set-shard-property:
 SELECT citus_shard_property_set(shardid, anti_affinity=>'true')
    FROM pg_dist_shard WHERE logicalrelid = 'table_to_distribute'::regclass
    ORDER BY shardid LIMIT 1;

ERROR:  could not acquire the lock required to set a property for a shard of public.table_to_distribute
step s1-rollback:
    ROLLBACK;

step s2-commit:
 COMMIT;

