Parsed test spec with 2 sessions

starting permutation: s1-begin s2-begin s2-reindex s1-insert s2-commit s1-commit
step s1-begin:
	BEGIN;
	SET ROLE test_user_1;

step s2-begin:
	BEGIN;
	SET ROLE test_user_2;

step s2-reindex:
	REINDEX TABLE test_table;

ERROR:  must be owner of table test_table
step s1-insert:
	UPDATE test_table SET column2 = 1;

step s2-commit:
	COMMIT;

step s1-commit:
	COMMIT;


starting permutation: s1-grant s1-begin s2-begin s2-reindex s1-insert s2-insert s2-commit s1-commit
step s1-grant:
	SET ROLE test_user_1;
	SELECT bool_and(success) FROM run_command_on_placements('test_table', 'GRANT ALL ON TABLE %s TO test_user_2');
	GRANT ALL ON test_table TO test_user_2;

bool_and

t
step s1-begin:
	BEGIN;
	SET ROLE test_user_1;

step s2-begin:
	BEGIN;
	SET ROLE test_user_2;

step s2-reindex:
	REINDEX TABLE test_table;

ERROR:  must be owner of table test_table
step s1-insert:
	UPDATE test_table SET column2 = 1;

step s2-insert:
	UPDATE test_table SET column2 = 2;

ERROR:  current transaction is aborted, commands ignored until end of transaction block
step s2-commit:
	COMMIT;

step s1-commit:
	COMMIT;


starting permutation: s1-grant s1-begin s2-begin s1-reindex s2-insert s1-insert s1-commit s2-commit
step s1-grant:
	SET ROLE test_user_1;
	SELECT bool_and(success) FROM run_command_on_placements('test_table', 'GRANT ALL ON TABLE %s TO test_user_2');
	GRANT ALL ON test_table TO test_user_2;

bool_and

t
step s1-begin:
	BEGIN;
	SET ROLE test_user_1;

step s2-begin:
	BEGIN;
	SET ROLE test_user_2;

step s1-reindex:
	REINDEX TABLE test_table;

step s2-insert:
	UPDATE test_table SET column2 = 2;
 <waiting ...>
step s1-insert:
	UPDATE test_table SET column2 = 1;

step s1-commit:
	COMMIT;

step s2-insert: <... completed>
step s2-commit:
	COMMIT;


starting permutation: s1-begin s2-begin s2-index s1-insert s2-commit s1-commit s2-drop-index
step s1-begin:
	BEGIN;
	SET ROLE test_user_1;

step s2-begin:
	BEGIN;
	SET ROLE test_user_2;

step s2-index:
	CREATE INDEX test_index ON test_table(column1);

ERROR:  must be owner of table test_table
step s1-insert:
	UPDATE test_table SET column2 = 1;

step s2-commit:
	COMMIT;

step s1-commit:
	COMMIT;

step s2-drop-index:
	DROP INDEX IF EXISTS test_index;


starting permutation: s1-grant s1-begin s2-begin s2-insert s1-index s2-insert s2-commit s1-commit s1-drop-index
step s1-grant:
	SET ROLE test_user_1;
	SELECT bool_and(success) FROM run_command_on_placements('test_table', 'GRANT ALL ON TABLE %s TO test_user_2');
	GRANT ALL ON test_table TO test_user_2;

bool_and

t
step s1-begin:
	BEGIN;
	SET ROLE test_user_1;

step s2-begin:
	BEGIN;
	SET ROLE test_user_2;

step s2-insert:
	UPDATE test_table SET column2 = 2;

step s1-index:
	CREATE INDEX test_index ON test_table(column1);
 <waiting ...>
step s2-insert:
	UPDATE test_table SET column2 = 2;

step s2-commit:
	COMMIT;

step s1-index: <... completed>
step s1-commit:
	COMMIT;

step s1-drop-index:
	DROP INDEX IF EXISTS test_index;


starting permutation: s1-grant s1-begin s2-begin s1-index s2-index s1-insert s1-commit s2-commit s1-drop-index s2-drop-index
step s1-grant:
	SET ROLE test_user_1;
	SELECT bool_and(success) FROM run_command_on_placements('test_table', 'GRANT ALL ON TABLE %s TO test_user_2');
	GRANT ALL ON test_table TO test_user_2;

bool_and

t
step s1-begin:
	BEGIN;
	SET ROLE test_user_1;

step s2-begin:
	BEGIN;
	SET ROLE test_user_2;

step s1-index:
	CREATE INDEX test_index ON test_table(column1);

step s2-index:
	CREATE INDEX test_index ON test_table(column1);

ERROR:  must be owner of table test_table
step s1-insert:
	UPDATE test_table SET column2 = 1;

step s1-commit:
	COMMIT;

step s2-commit:
	COMMIT;

step s1-drop-index:
	DROP INDEX IF EXISTS test_index;

step s2-drop-index:
	DROP INDEX IF EXISTS test_index;


starting permutation: s1-begin s2-begin s2-truncate s1-insert s2-commit s1-commit
step s1-begin:
	BEGIN;
	SET ROLE test_user_1;

step s2-begin:
	BEGIN;
	SET ROLE test_user_2;

step s2-truncate:
	TRUNCATE test_table;

ERROR:  permission denied for table test_table
step s1-insert:
	UPDATE test_table SET column2 = 1;

step s2-commit:
	COMMIT;

step s1-commit:
	COMMIT;


starting permutation: s1-grant s1-begin s2-begin s1-truncate s2-insert s1-insert s1-commit s2-commit
step s1-grant:
	SET ROLE test_user_1;
	SELECT bool_and(success) FROM run_command_on_placements('test_table', 'GRANT ALL ON TABLE %s TO test_user_2');
	GRANT ALL ON test_table TO test_user_2;

bool_and

t
step s1-begin:
	BEGIN;
	SET ROLE test_user_1;

step s2-begin:
	BEGIN;
	SET ROLE test_user_2;

step s1-truncate:
	TRUNCATE test_table;

step s2-insert:
	UPDATE test_table SET column2 = 2;
 <waiting ...>
step s1-insert:
	UPDATE test_table SET column2 = 1;

step s1-commit:
	COMMIT;

step s2-insert: <... completed>
step s2-commit:
	COMMIT;


starting permutation: s1-grant s1-begin s2-begin s1-truncate s2-truncate s1-commit s2-commit
step s1-grant:
	SET ROLE test_user_1;
	SELECT bool_and(success) FROM run_command_on_placements('test_table', 'GRANT ALL ON TABLE %s TO test_user_2');
	GRANT ALL ON test_table TO test_user_2;

bool_and

t
step s1-begin:
	BEGIN;
	SET ROLE test_user_1;

step s2-begin:
	BEGIN;
	SET ROLE test_user_2;

step s1-truncate:
	TRUNCATE test_table;

step s2-truncate:
	TRUNCATE test_table;
 <waiting ...>
step s1-commit:
	COMMIT;

step s2-truncate: <... completed>
step s2-commit:
	COMMIT;

